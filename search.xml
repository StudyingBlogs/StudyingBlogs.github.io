<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Latex简单语法</title>
    <url>/posts/dbde08a2/</url>
    <content><![CDATA[<h1 id="Latex教程"><a href="#Latex教程" class="headerlink" title="Latex教程"></a>Latex教程</h1><h2 id="Latex基本结构"><a href="#Latex基本结构" class="headerlink" title="Latex基本结构"></a>Latex基本结构</h2><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">%  导言区</span><br><span class="line"><span class="string">\documentclass&#123;article&#125;%book,report,letter</span></span><br><span class="line"><span class="string">\title&#123;My</span> First Document&#125;</span><br><span class="line"><span class="string">\author&#123;Hjl&#125;</span></span><br><span class="line"><span class="string">\date&#123;\today&#125;</span></span><br><span class="line"></span><br><span class="line">% 正文区</span><br><span class="line"><span class="string">\begin&#123;document&#125;</span></span><br><span class="line"><span class="string">\maketitle</span> %输出标题</span><br><span class="line">    Hello World!</span><br><span class="line"><span class="string">\end&#123;document&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="Latex基本语法"><a href="#Latex基本语法" class="headerlink" title="Latex基本语法"></a>Latex基本语法</h2><figure class="highlight xl"><table><tr><td class="code"><pre><span class="line">\<span class="function"><span class="title">usepackage</span>&#123;ctex&#125;-&gt;</span>输出中文</span><br><span class="line">空格换行</span><br><span class="line">\\-&gt;换行</span><br><span class="line">\<span class="function"><span class="title">par</span>-&gt;</span>分段</span><br><span class="line">\<span class="function"><span class="title">quad</span>-&gt;</span>生成一个大小<span class="number">1</span>em的空格</span><br><span class="line">\<span class="function"><span class="title">qquad</span>-&gt;</span>生成一个<span class="number">2</span>em的空格</span><br><span class="line">\<span class="function"><span class="title">thinspace</span>-&gt;</span>生成一个<span class="number">1</span>/<span class="number">6</span>个em</span><br><span class="line">\<span class="function"><span class="title">emspace</span>-&gt;</span>生成<span class="number">0.5</span>em个空格</span><br><span class="line">\ -&gt;生成一个空格</span><br><span class="line">~-&gt;硬空格</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Latex字体字号设置"><a href="#Latex字体字号设置" class="headerlink" title="Latex字体字号设置"></a>Latex字体字号设置</h2><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="template-variable">&#123;\songti 宋体&#125;</span><span class="language-xml">%中文字体</span></span><br><span class="line"><span class="language-xml">\textrm</span><span class="template-variable">&#123;Roman Family&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">\rmfamily Roman Family</span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 设置字体粗细 --&gt;</span></span></span><br><span class="line"><span class="language-xml">\textmd</span><span class="template-variable">&#123;Medium Series&#125;</span><span class="language-xml"> \textbf</span><span class="template-variable">&#123;Boldface Series&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;\mdseries Medium Series&#125;</span><span class="language-xml"> </span><span class="template-variable">&#123;\bfseries Boldface Series&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 设置字体粗细 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 直立\斜体 --&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;\upshape Upright Shape&#125;</span><span class="language-xml"> </span><span class="template-variable">&#123;\itshape Italic shape&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 英文字号设置 --&gt;</span></span></span><br><span class="line"><span class="language-xml">%字体大小</span></span><br><span class="line"><span class="language-xml">    \documentclass[10pt]</span><span class="template-variable">&#123;article&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">&#123;\tiny Hello&#125;</span><span class="language-xml">\\</span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">&#123;\scriptsize Hello&#125;</span><span class="language-xml">\\</span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">&#123;\footnotesize Hello&#125;</span><span class="language-xml">\\</span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">&#123;\small Hello&#125;</span><span class="language-xml">\\</span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">&#123;\normalsize Hello&#125;</span><span class="language-xml">\\</span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">&#123;\large Hello&#125;</span><span class="language-xml">\\</span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">&#123;\Large Hello&#125;</span><span class="language-xml">\\</span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">&#123;\LARGE Hello&#125;</span><span class="language-xml">\\</span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">&#123;\huge Hello&#125;</span><span class="language-xml">\\</span></span><br><span class="line"><span class="language-xml">    </span><span class="template-variable">&#123;\Huge Hello&#125;</span><span class="language-xml">\\</span></span><br><span class="line"><span class="language-xml">% 中文字体</span></span><br><span class="line"><span class="language-xml">\zihao</span><span class="template-variable">&#123;-1&#125;</span><span class="language-xml"> 你好</span></span><br></pre></td></tr></table></figure>
<h2 id="Latex篇章结构"><a href="#Latex篇章结构" class="headerlink" title="Latex篇章结构"></a>Latex篇章结构</h2><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="string">\begin&#123;document&#125;</span></span><br><span class="line">    <span class="string">\tableofcontents%生成目录</span></span><br><span class="line">    <span class="string">\chapter%</span> 生成章节</span><br><span class="line">    <span class="string">\section&#123;引言&#125;%小结</span></span><br><span class="line">    <span class="string">\section&#123;实验方法&#125;</span></span><br><span class="line">    <span class="string">\section&#123;实验结果&#125;</span></span><br><span class="line">    <span class="string">\section&#123;实验过程&#125;</span></span><br><span class="line">    <span class="string">\section&#123;致谢&#125;</span></span><br><span class="line"><span class="string">\end&#123;document&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="Latex的插图"><a href="#Latex的插图" class="headerlink" title="Latex的插图"></a>Latex的插图</h2><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">\usepackage</span><span class="template-variable">&#123;graphicx&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">\includegraphics[]</span><span class="template-variable">&#123;&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="Latex数学公式"><a href="#Latex数学公式" class="headerlink" title="Latex数学公式"></a>Latex数学公式</h2><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$</span><span class="symbol">$</span></span><br><span class="line"><span class="symbol">$</span><span class="symbol">$</span><span class="symbol">$</span><span class="symbol">$</span>-&gt;公式居中</span><br><span class="line">\(a+b=b+a\)</span><br><span class="line">\begin&#123;math&#125;a+b=b+a\end&#123;math&#125;</span><br><span class="line">上标-&gt;<span class="string">&quot;^&quot;</span></span><br><span class="line">下标-&gt;<span class="string">&quot;_&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="产生带编号的公式"><a href="#产生带编号的公式" class="headerlink" title="产生带编号的公式"></a>产生带编号的公式</h2><figure class="highlight parser3"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">\begin&#123;equation&#125;</span></span><br><span class="line"><span class="language-xml">    AB</span><span class="keyword">^2</span><span class="language-xml"> = BC</span><span class="keyword">^2</span><span class="language-xml"> + AC</span><span class="keyword">^2</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">\end&#123;equation&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="Latex数学公式的矩阵"><a href="#Latex数学公式的矩阵" class="headerlink" title="Latex数学公式的矩阵"></a>Latex数学公式的矩阵</h2><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="variable">$\</span><span class="keyword">begin</span>&#123;matrix&#125;</span><br><span class="line">        <span class="number">0</span> &amp; <span class="number">2</span> \\ </span><br><span class="line">        <span class="number">1</span> &amp; <span class="number">2</span></span><br><span class="line">    \<span class="keyword">end</span>&#123;matrix&#125;<span class="variable">$</span></span><br><span class="line"><span class="variable"></span></span><br><span class="line">    <span class="variable">$\</span><span class="keyword">begin</span>&#123;pmatrix&#125;</span><br><span class="line">        <span class="number">0</span> &amp; <span class="number">2</span> \\ </span><br><span class="line">        <span class="number">1</span> &amp; <span class="number">2</span></span><br><span class="line">    \<span class="keyword">end</span>&#123;pmatrix&#125;<span class="variable">$</span></span><br><span class="line"><span class="variable"></span></span><br><span class="line">    <span class="variable">$\</span><span class="keyword">begin</span>&#123;Bmatrix&#125;</span><br><span class="line">        <span class="number">0</span> &amp; <span class="number">2</span> \\ </span><br><span class="line">        <span class="number">1</span> &amp; <span class="number">2</span></span><br><span class="line">    \<span class="keyword">end</span>&#123;Bmatrix&#125;<span class="variable">$</span></span><br><span class="line"><span class="variable"></span></span><br><span class="line">    <span class="variable">$\</span><span class="keyword">begin</span>&#123;vmatrix&#125;</span><br><span class="line">        <span class="number">0</span> &amp; <span class="number">2</span> \\ </span><br><span class="line">        <span class="number">1</span> &amp; <span class="number">2</span></span><br><span class="line">    \<span class="keyword">end</span>&#123;vmatrix&#125;$</span><br></pre></td></tr></table></figure>
<h2 id="Latex多行公式的排版"><a href="#Latex多行公式的排版" class="headerlink" title="Latex多行公式的排版"></a>Latex多行公式的排版</h2><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">\<span class="keyword">begin&#123;gather&#125;</span></span><br><span class="line"><span class="keyword"></span>    a + <span class="keyword">b </span>= <span class="keyword">b </span>+ a \\</span><br><span class="line">    ab <span class="keyword">ba</span></span><br><span class="line"><span class="keyword"></span>\end&#123;gather&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Latex对参考文献的排版"><a href="#Latex对参考文献的排版" class="headerlink" title="Latex对参考文献的排版"></a>Latex对参考文献的排版</h2>]]></content>
  </entry>
  <entry>
    <title>Easyx基本语法</title>
    <url>/posts/a347db67/</url>
    <content><![CDATA[<h1 id="Easyx使用"><a href="#Easyx使用" class="headerlink" title="Easyx使用"></a>Easyx使用</h1><h5 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h5><h6 id="创建窗口"><a href="#创建窗口" class="headerlink" title="创建窗口"></a>创建窗口</h6><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">initgraph</span>(width,height)</span><br></pre></td></tr></table></figure>

<h6 id="关闭窗口"><a href="#关闭窗口" class="headerlink" title="关闭窗口"></a>关闭窗口</h6><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">closegraph</span>()</span><br></pre></td></tr></table></figure>

<h6 id="画圆"><a href="#画圆" class="headerlink" title="画圆"></a>画圆</h6><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">circle</span>(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> radius);<span class="comment">// 无填充</span></span><br><span class="line"><span class="built_in">filecircle</span>(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> radius);<span class="comment">// 有填充</span></span><br><span class="line"><span class="built_in">solidcircle</span>(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> radius);<span class="comment">// 无边框填充</span></span><br></pre></td></tr></table></figure>

<h6 id="设置填充颜色"><a href="#设置填充颜色" class="headerlink" title="设置填充颜色"></a>设置填充颜色</h6><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setfillcolor</span>(RED);</span><br></pre></td></tr></table></figure>

<h6 id="设置线条颜色"><a href="#设置线条颜色" class="headerlink" title="设置线条颜色"></a>设置线条颜色</h6><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setlinecolor</span>(BLUE);</span><br></pre></td></tr></table></figure>

<h6 id="设置线条样式"><a href="#设置线条样式" class="headerlink" title="设置线条样式"></a>设置线条样式</h6><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setlinestyle</span>(PS_SOLID,<span class="number">5</span>);</span><br></pre></td></tr></table></figure>

<h6 id="设置背景颜色"><a href="#设置背景颜色" class="headerlink" title="设置背景颜色"></a>设置背景颜色</h6><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setbkcolor</span>(WHITE);</span><br><span class="line"><span class="built_in">cleardevice</span>(); <span class="comment">// 清屏</span></span><br></pre></td></tr></table></figure>

<h6 id="输出文字"><a href="#输出文字" class="headerlink" title="输出文字"></a>输出文字</h6><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">outtextxy</span>(<span class="type">int</span> x,<span class="type">int</span> y,string str);</span><br></pre></td></tr></table></figure>

<h6 id="修改文字颜色"><a href="#修改文字颜色" class="headerlink" title="修改文字颜色"></a>修改文字颜色</h6><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">settextcolor</span>(RED);</span><br></pre></td></tr></table></figure>

<h6 id="修改文字样式"><a href="#修改文字样式" class="headerlink" title="修改文字样式"></a>修改文字样式</h6><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">settextstyle</span>(文字大小,文字方向,文字字体);</span><br></pre></td></tr></table></figure>

<h6 id="修改文字背景样式"><a href="#修改文字背景样式" class="headerlink" title="修改文字背景样式"></a>修改文字背景样式</h6><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setbkmode</span>(TRANSPARENT);</span><br></pre></td></tr></table></figure>

<h6 id="求字符串实际占用的像素高度"><a href="#求字符串实际占用的像素高度" class="headerlink" title="求字符串实际占用的像素高度"></a>求字符串实际占用的像素高度</h6><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">textheight</span>(string str);</span><br></pre></td></tr></table></figure>

<h6 id="求字符串实际占用的像素宽度"><a href="#求字符串实际占用的像素宽度" class="headerlink" title="求字符串实际占用的像素宽度"></a>求字符串实际占用的像素宽度</h6><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">textwidth</span>(string str);</span><br></pre></td></tr></table></figure>

<h5 id="图像处理函数"><a href="#图像处理函数" class="headerlink" title="图像处理函数"></a>图像处理函数</h5><p>图像数据类型：IMAGE</p>
<h6 id="从文件中读取图像"><a href="#从文件中读取图像" class="headerlink" title="从文件中读取图像"></a>从文件中读取图像</h6><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">loadimage</span>(IMAGE * pDstimg,LPCTSTR plmgFile,<span class="type">int</span> nWidth = <span class="number">0</span>,<span class="type">int</span> nHeight = <span class="number">0</span>,<span class="type">bool</span> bResize = <span class="literal">false</span>);</span><br><span class="line">- pDstimg <span class="comment">//保存图片的IMAGE对象指针&amp;img</span></span><br><span class="line">- plmgFile <span class="comment">//图片文件名</span></span><br><span class="line">- nWidth = <span class="number">0</span> <span class="comment">//图片的拉伸宽度</span></span><br><span class="line">- nHeight = <span class="number">0</span> <span class="comment">// 图片的拉伸高度</span></span><br><span class="line">- bResize = <span class="literal">false</span> <span class="comment">// 是否调整IMAGE的大小以适应图片</span></span><br></pre></td></tr></table></figure>

<h6 id="绘制图片"><a href="#绘制图片" class="headerlink" title="绘制图片"></a>绘制图片</h6><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">putimage</span>(<span class="type">int</span> x,<span class="type">int</span> y,IMAGE *img,DWORD dwRop = SRCCOPY);</span><br></pre></td></tr></table></figure>

<h5 id="鼠标操作"><a href="#鼠标操作" class="headerlink" title="鼠标操作"></a>鼠标操作</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ExMessage msg;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">peekmessage</span>(&amp;msg, EM_MOUSE)) &#123;</span><br><span class="line">			<span class="keyword">switch</span> (msg.message) &#123;</span><br><span class="line">			<span class="keyword">case</span> WM_LBUTTONDOWN:</span><br><span class="line">				<span class="keyword">if</span> (msg.x &gt;= <span class="number">50</span> &amp;&amp; msg.x &lt;= <span class="number">50</span> + <span class="number">150</span> &amp;&amp; msg.y &gt;= <span class="number">50</span> &amp;&amp; msg.y &lt;= <span class="number">50</span> + <span class="number">50</span>) &#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;我是按钮，我被点击了&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h5 id="键盘操作"><a href="#键盘操作" class="headerlink" title="键盘操作"></a>键盘操作</h5><h6 id="getch"><a href="#getch" class="headerlink" title="getch();"></a>getch();</h6><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">getch</span>(); <span class="comment">//需要返回值来判断</span></span><br><span class="line"><span class="comment">// 上：72 </span></span><br><span class="line"><span class="comment">// 下：80</span></span><br><span class="line"><span class="comment">// 左：75</span></span><br><span class="line"><span class="comment">// 右：77</span></span><br></pre></td></tr></table></figure>

<h6 id="GetAsynckKeyState"><a href="#GetAsynckKeyState" class="headerlink" title="GetAsynckKeyState();"></a>GetAsynckKeyState();</h6><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">GetAsyncKeyState</span>(VK_UP)) &#123;</span><br><span class="line">			y -= <span class="number">5</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">GetAsyncKeyState</span>(VK_DOWN)) &#123;</span><br><span class="line">			y += <span class="number">5</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">GetAsyncKeyState</span>(VK_LEFT)) &#123;</span><br><span class="line">			x -= <span class="number">5</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">GetAsyncKeyState</span>(VK_RIGHT)) &#123;</span><br><span class="line">			x -= <span class="number">5</span>;</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>



<h5 id="缓冲绘图"><a href="#缓冲绘图" class="headerlink" title="缓冲绘图"></a>缓冲绘图</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">BeginBatchDraw</span>();  <span class="comment">//  开始绘图</span></span><br><span class="line"><span class="built_in">EndBatchDraw</span>();    <span class="comment">// 结束绘图</span></span><br></pre></td></tr></table></figure>

<h5 id="播放音乐"><a href="#播放音乐" class="headerlink" title="播放音乐"></a>播放音乐</h5><h6 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h6><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;mmsystem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;winmm.lib&quot;</span>) <span class="comment">// 加载静态库</span></span></span><br></pre></td></tr></table></figure>

<h6 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h6><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mciSendString</span>(<span class="string">&quot;open ./ThatGirl.mp3,0,0,0&quot;</span>);</span><br><span class="line"><span class="built_in">mciSendString</span>(<span class="string">&quot;play ./ThatGirl.mp3,0,0,0&quot;</span>);</span><br><span class="line"><span class="built_in">mciSendString</span>(<span class="string">&quot;close ./ThatGirl.mp3,0,0,0&quot;</span>); <span class="comment">// 关闭音乐</span></span><br></pre></td></tr></table></figure>

<h5 id="修改窗口标题、弹出对话框"><a href="#修改窗口标题、弹出对话框" class="headerlink" title="修改窗口标题、弹出对话框"></a>修改窗口标题、弹出对话框</h5><h6 id="修改窗口标题"><a href="#修改窗口标题" class="headerlink" title="修改窗口标题"></a>修改窗口标题</h6><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">HWND hnd = <span class="built_in">GetHWnd</span>();</span><br><span class="line"><span class="built_in">SetWindowText</span>(hnd, <span class="string">&quot;C语言PLUS&quot;</span>);</span><br></pre></td></tr></table></figure>

<h6 id="弹出对话框"><a href="#弹出对话框" class="headerlink" title="弹出对话框"></a>弹出对话框</h6><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">MessageBox</span>(hnd, <span class="string">&quot;恭喜你，进入游戏&quot;</span>,<span class="string">&quot;提示&quot;</span>,MB_OKCANCEL);</span><br><span class="line"><span class="keyword">if</span> (isok == IDOK) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;你点击了确认&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (isok == IDCANCEL) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;你点击了取消&quot;</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>















]]></content>
  </entry>
  <entry>
    <title>PYTHON爬虫</title>
    <url>/posts/be7d9a75/</url>
    <content><![CDATA[<h1 id="PYTHON爬虫"><a href="#PYTHON爬虫" class="headerlink" title="PYTHON爬虫"></a>PYTHON爬虫</h1><h2 id="requests的方法"><a href="#requests的方法" class="headerlink" title="requests的方法"></a>requests的方法</h2><img src="/posts/be7d9a75/1.png" class title="图片">

<h2 id="Response对象的属性"><a href="#Response对象的属性" class="headerlink" title="Response对象的属性"></a>Response对象的属性</h2><img src="/posts/be7d9a75/2.png" class title="图片">

<h2 id="Requests库的异常"><a href="#Requests库的异常" class="headerlink" title="Requests库的异常"></a>Requests库的异常</h2><img src="/posts/be7d9a75/3.png" class title="图片">

<img src="/posts/be7d9a75/4.png" class title="图片">

<h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p>HTTP,Hypertext Transfer Protocol,超文本传输协议。</p>
<p>HTTP是一个基于”请求与响应”模式的、无状态的应用层协议。</p>
<p>HTTP协议采用URL作为定位网络资源的标识。</p>
<p>URL格式         <a href="http://host[:port][path]">http://host[:port][path]</a></p>
<ul>
<li>host:合法的Internet主机域名或IP地址</li>
<li>port:端口号，缺省端口为80</li>
<li>path:请求资源的路径</li>
</ul>
<h3 id="HTTP-URL的理解"><a href="#HTTP-URL的理解" class="headerlink" title="HTTP URL的理解"></a>HTTP URL的理解</h3><p>URL是通过HTTP协议存取资源Internet路径，一个URL对应一个数据资源。</p>
<h2 id="Beautiful-Soup库的理解"><a href="#Beautiful-Soup库的理解" class="headerlink" title="Beautiful Soup库的理解"></a>Beautiful Soup库的理解</h2><p>Beautiful Soup库是解析、遍历、维护“标签树”的功能库。</p>
<img src="/posts/be7d9a75/5.png" class title="图片">

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://python123.io/ws/demo.html&quot;</span></span><br><span class="line">r = requests.get(url)</span><br><span class="line">demo = r.text</span><br><span class="line">soup = BeautifulSoup(demo,<span class="string">&quot;html.parser&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="标签树遍历"><a href="#标签树遍历" class="headerlink" title="标签树遍历"></a>标签树遍历</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> soup.body.children:</span><br><span class="line">	<span class="built_in">print</span>(child)</span><br><span class="line"><span class="comment"># 遍历儿子节点</span></span><br></pre></td></tr></table></figure>

<h4 id="标签树的下行遍历"><a href="#标签树的下行遍历" class="headerlink" title="标签树的下行遍历"></a>标签树的下行遍历</h4><img src="/posts/be7d9a75/6.png" class title="图片">

<h4 id="标签树的上行遍历"><a href="#标签树的上行遍历" class="headerlink" title="标签树的上行遍历"></a>标签树的上行遍历</h4><img src="/posts/be7d9a75/7.png" class title="图片">

<h4 id="标签树的平行遍历"><a href="#标签树的平行遍历" class="headerlink" title="标签树的平行遍历"></a>标签树的平行遍历</h4><img src="/posts/be7d9a75/8.png" class title="图片">

<h3 id="find查找"><a href="#find查找" class="headerlink" title="find查找"></a>find查找</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">soup.find_all(<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;course&#x27;</span>)</span><br><span class="line"><span class="comment"># 带有course属性的p标签</span></span><br></pre></td></tr></table></figure>

<img src="/posts/be7d9a75/9.png" class title="图片">

<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><img src="/posts/be7d9a75/10.png" class title="图片">

<img src="/posts/be7d9a75/11.png" class title="图片">

<h2 id="Re库基本使用"><a href="#Re库基本使用" class="headerlink" title="Re库基本使用"></a>Re库基本使用</h2><p>re库采用raw string类型表示正则表达式，表示为：r’text’(原生字符串类型)</p>
<p>string类型，更繁琐</p>
<h3 id="Re库主要功能函数"><a href="#Re库主要功能函数" class="headerlink" title="Re库主要功能函数"></a>Re库主要功能函数</h3><img src="/posts/be7d9a75/12.png" class title="图片">

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">regex = re.<span class="built_in">compile</span>(pattern,flags=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 将正则表达式形式编译成正则表达式对象</span></span><br></pre></td></tr></table></figure>

<h4 id="re库的match对象"><a href="#re库的match对象" class="headerlink" title="re库的match对象"></a>re库的match对象</h4><img src="/posts/be7d9a75/13.png" class title="图片">

<img src="/posts/be7d9a75/14.png" class title="图片">

<h6 id="最小匹配操作符"><a href="#最小匹配操作符" class="headerlink" title="最小匹配操作符"></a>最小匹配操作符</h6><img src="/posts/be7d9a75/15.png" class title="图片">

<h2 id="Scrapy框架"><a href="#Scrapy框架" class="headerlink" title="Scrapy框架"></a>Scrapy框架</h2><img src="/posts/be7d9a75/16.png" class title="图片">

]]></content>
  </entry>
  <entry>
    <title>前端第01节，HTML的学习</title>
    <url>/posts/77351097/</url>
    <content><![CDATA[<h1 id="HTML的学习"><a href="#HTML的学习" class="headerlink" title="HTML的学习"></a>HTML的学习</h1><h2 id="HTML常用标签"><a href="#HTML常用标签" class="headerlink" title="HTML常用标签"></a>HTML常用标签</h2><p>h1-h6:标题标签<br>p:段落标签<br>br:换行标签<br>strong&#x2F;b:加粗<br>em&#x2F;i:倾斜<br>del&#x2F;s:删除线<br>ins&#x2F;u:下划线<br>div:盒子,一行只能放一个，用于布局<br>span:盒子，一行可以放多个，用于布局<br>img:src属性-&gt;路径,alt属性-&gt;图片无法正常显示，显示文字<br>title-&gt;鼠标放到图片上显示的文字,width-&gt;宽度,height-&gt;高度，border-&gt;像素，设置边框的粗细<br>a:超链接&#x2F;内部链接，href属性，地址，target属性，_blank在新窗口打开,空连接:#,下载链接，如果链接是文件或压缩包<br>图片，文本，表格，音频，视频都可以当链接。<br>锚点链接：类似于 目录</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#two&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">&quot;two&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">注释：&lt;!-- 注释 --&gt;ctrl + /</span><br><span class="line">&amp;nbsp;空格</span><br><span class="line">&amp;lt-&gt;小于号</span><br><span class="line">&amp;gt-&gt;大于号</span><br></pre></td></tr></table></figure>
<p>表格标签：table-&gt;表格,tr-&gt;行,td-&gt;单元格，th-&gt;表头单元格</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>刘德华<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>57<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>张学友<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>56<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>thead-&gt;表头标签<br>tbody-&gt;身体标签<br>rowspan-&gt;跨行合并<br>colspan-&gt;跨列合并<br>合并单元格，最后要删除单元格<br>列表：无序列表，有序列表，自定义列表<br>无序列表：ul,li,ul嵌套li<br>有序列表：ol嵌套li<br>自定义列表：dl嵌套dt,dd,dd解释dt<br>表单：<br>form定义表单域,action属性-&gt;url地址<br>method-&gt;提交方式<br>name-&gt;指定表单的名称<br>input-&gt;输入,type:text文本,passward密码,radio单选,checkbox-&gt;多选框<br>checked-&gt;打开时默认选择<br>maxlentgth-&gt;输入长度<br>submit-&gt;提交<br>reset-&gt;重置按钮<br>button-&gt;获取验证码，按钮<br>file-&gt;上传文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    性别:男 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span> 女 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>label-&gt;绑定一个表单元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sex&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>select-&gt;下拉选择，嵌套option<br>textarea-&gt;文本域，评论留言</p>
]]></content>
  </entry>
  <entry>
    <title>Linux基础</title>
    <url>/posts/a4a81253/</url>
    <content><![CDATA[<h1 id="Linux学习"><a href="#Linux学习" class="headerlink" title="Linux学习"></a>Linux学习</h1><h2 id="虚拟机克隆"><a href="#虚拟机克隆" class="headerlink" title="虚拟机克隆"></a>虚拟机克隆</h2><h2 id="虚拟机快照"><a href="#虚拟机快照" class="headerlink" title="虚拟机快照"></a>虚拟机快照</h2><p>回到原来的状态</p>
<h2 id="vmtools"><a href="#vmtools" class="headerlink" title="vmtools"></a>vmtools</h2><p>1.可以设置windows和centos的共享文件夹</p>
<h2 id="共享文件夹"><a href="#共享文件夹" class="headerlink" title="共享文件夹"></a>共享文件夹</h2><p>设置-&gt;选项-&gt;共享文件夹<br>其他位置-&gt;计算机-&gt;mnt-&gt;hgfs</p>
<h2 id="Linux目录结构"><a href="#Linux目录结构" class="headerlink" title="Linux目录结构"></a>Linux目录结构</h2><h3 id="x2F-bin"><a href="#x2F-bin" class="headerlink" title="&#x2F;bin"></a>&#x2F;bin</h3><p>存放常用的指令</p>
<h3 id="x2F-sbin"><a href="#x2F-sbin" class="headerlink" title="&#x2F;sbin"></a>&#x2F;sbin</h3><p>管理员使用的系统管理程序</p>
<h3 id="x2F-home"><a href="#x2F-home" class="headerlink" title="&#x2F;home"></a>&#x2F;home</h3><p>存放普通用户的主目录，在Linux中每个用户都有一个自己的目录，一般该目录是以用户的账号命名</p>
<h3 id="x2F-root"><a href="#x2F-root" class="headerlink" title="&#x2F;root"></a>&#x2F;root</h3><p>系统管理员的用户主目录</p>
<h3 id="x2F-lib"><a href="#x2F-lib" class="headerlink" title="&#x2F;lib"></a>&#x2F;lib</h3><p>系统开机所需要最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要这些共享库</p>
<h3 id="x2F-lost-found"><a href="#x2F-lost-found" class="headerlink" title="&#x2F;lost+found"></a>&#x2F;lost+found</h3><p>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件</p>
<h3 id="x2F-etc"><a href="#x2F-etc" class="headerlink" title="&#x2F;etc"></a>&#x2F;etc</h3><p>所有的系统管理所需要的配置文件和子目录，比如安装mysql数据库my.conf</p>
<h3 id="x2F-usr"><a href="#x2F-usr" class="headerlink" title="&#x2F;usr"></a>&#x2F;usr</h3><p>这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与windows下<br>的program files目录，</p>
<h3 id="x2F-boot"><a href="#x2F-boot" class="headerlink" title="&#x2F;boot"></a>&#x2F;boot</h3><p>存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件</p>
<h3 id="x2F-proc"><a href="#x2F-proc" class="headerlink" title="&#x2F;proc"></a>&#x2F;proc</h3><p>这个目录是一个虚拟的目录，它是系统内存的映射，访问这个目录来获取系统信息</p>
<h3 id="x2F-srv-service"><a href="#x2F-srv-service" class="headerlink" title="&#x2F;srv service"></a>&#x2F;srv service</h3><p>缩写，该目录存放一些服务启动之后需要提取的数据</p>
<h3 id="x2F-sys"><a href="#x2F-sys" class="headerlink" title="&#x2F;sys"></a>&#x2F;sys</h3><p>这是linux2.6内核的一个很大的变化.核目录下安装了2.6内核中新出现的一个文件系sysfs</p>
<h3 id="x2F-tmp"><a href="#x2F-tmp" class="headerlink" title="&#x2F;tmp"></a>&#x2F;tmp</h3><p>这个目录是用来存放一些临时文件的</p>
<h3 id="x2F-dev"><a href="#x2F-dev" class="headerlink" title="&#x2F;dev"></a>&#x2F;dev</h3><p>类似于windows的设备管理器，把所有的硬件用文件的形式存储</p>
<h3 id="x2F-media"><a href="#x2F-media" class="headerlink" title="&#x2F;media"></a>&#x2F;media</h3><p>linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下</p>
<h3 id="x2F-mnt"><a href="#x2F-mnt" class="headerlink" title="&#x2F;mnt"></a>&#x2F;mnt</h3><p>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将外部的存储挂载在&#x2F;mnt&#x2F;上然后进入该目录就可以查看里的内容了。d:&#x2F;myshare</p>
<h3 id="x2F-opt"><a href="#x2F-opt" class="headerlink" title="&#x2F;opt"></a>&#x2F;opt</h3><p>这是给主机额外安装软件所摆放的目录。如安装ORACLE数据库就可放到该目录下。</p>
<h3 id="x2F-usr-x2F-local"><a href="#x2F-usr-x2F-local" class="headerlink" title="&#x2F;usr&#x2F;local"></a>&#x2F;usr&#x2F;local</h3><p>这是另一个给主机额外安装软件所安装的目录。一般是通过编译源码方式安装的程序</p>
<h3 id="var"><a href="#var" class="headerlink" title="var"></a>var</h3><p>这个目录中存放着在不断甘充着的东西，习惯将经常被修改的目录放在这个目录下。包括各种日志文件</p>
<h3 id="x2F-selinux-security-enhanced-linux"><a href="#x2F-selinux-security-enhanced-linux" class="headerlink" title="&#x2F;selinux [security-enhanced linux]"></a>&#x2F;selinux [security-enhanced linux]</h3><p>SELinux是一种安全子系统它能控制程序只能访问特定文件，有三种工作模式，可以自行设置.</p>
<h2 id="vi和vim"><a href="#vi和vim" class="headerlink" title="vi和vim"></a>vi和vim</h2><p>Vim具有程序编辑的能力，可以看作是vi的增强版本，可以主动的以字体颜色辨别语法的正确性，方便程序设计。代码补完、编辑及错误跳转等方便编辑的功能特别丰富，在程序中被广泛使用。</p>
<h3 id="正常模式"><a href="#正常模式" class="headerlink" title="正常模式"></a>正常模式</h3><p>以Vm打开一个档系就直接进入一般模式了（这是默认的模式）.在这个模式中，你可以使用「上下左右！按键来移动光标，你可以使用「删除字符】或『删除整行」来处理档案内容，也可以使用『复制、粘贴「来处理你的文件数据。</p>
<h3 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式"></a>插入模式</h3><p>按下，i,I,O,O,a,A,r,R等任何一个字母之后才会进入编辑模式，一搬来说按i即可.</p>
<h3 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h3><p>ESC + : 进入<br>在这个模式当中，可以提供你相关指令，完成读取、存盘、替换、离开m、显示行号等的动作则是在此模式中达成的！</p>

<h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>1拷贝当前行yy,拷贝当前行向下的5行 5yy,并粘（输入P)。<br>2.副除当前行dd,删除当前行向下的5行5dd<br>3.在文件中查找某个单词[命令行下&#x2F;关键字，回车查找，输入就是查找下一个]<br>4.设置文件的行号，取消文件的行号.[命令行下：set nu和set nonu<br>5.编辑&#x2F;etc&#x2F;profile文件，使用快捷键到该文档的最末行[G]和最首行[gg]<br>6.在一个文件中输入”hello”,然后叉微销这个动作u<br>7.编辑&#x2F;etc&#x2F;profile文件，并将光标移动到20行shift+g<br><img src="https://th.bing.com/th/id/R.acc327dfe0d5328c1ad102179c70b641?rik=i+FnOxLzzfUKfg&riu=http://blog.ngedit.com/vi-vim-cheat-sheet-sch.gif&ehk=2lhvrNWf3svGxmGmcwCPZ7MpnQiKi+TnVC3Urh0tXng=&risl=&pid=ImgRaw&r=0" alt="图片"></p>
<h2 id="关机，重启命令"><a href="#关机，重启命令" class="headerlink" title="关机，重启命令"></a>关机，重启命令</h2><p>shutdown -h&#x2F;-r now&#x2F;1立刻关机&#x2F;重启&#x2F;1分钟后<br>halt 关机<br>reboot 重启<br>sync 把内存的数据同步到磁盘</p>
<h2 id="用户登录和注销"><a href="#用户登录和注销" class="headerlink" title="用户登录和注销"></a>用户登录和注销</h2><p>logout注销用户</p>
<h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h2><p>useradd<br>useradd -d 指定目录<br>passwd 用户名 + 回车</p>
<h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><p>1.删除目录，但是保留家目录<br>userdel 用户名<br>2.删除用户以及用户主目录<br>userdel -r 用户名<br>一般情况下保留家目录</p>
<h2 id="查找用户"><a href="#查找用户" class="headerlink" title="查找用户"></a>查找用户</h2><p>id 用户名</p>
<h2 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h2><p>su - 用户名</p>
<h2 id="查看当前用户信息"><a href="#查看当前用户信息" class="headerlink" title="查看当前用户信息"></a>查看当前用户信息</h2><p>whoami</p>
<h2 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h2><h3 id="新增组"><a href="#新增组" class="headerlink" title="新增组"></a>新增组</h3><p>groupadd</p>
<h3 id="删除组"><a href="#删除组" class="headerlink" title="删除组"></a>删除组</h3><p>groupdel</p>
<h3 id="增加用户到组"><a href="#增加用户到组" class="headerlink" title="增加用户到组"></a>增加用户到组</h3><p>useradd -g 用户组 用户名</p>
<h3 id="修改组"><a href="#修改组" class="headerlink" title="修改组"></a>修改组</h3><p>usermod -g 用户组 用户名</p>
<h2 id="指定运行级别"><a href="#指定运行级别" class="headerlink" title="指定运行级别"></a>指定运行级别</h2><ul>
<li>0:关机</li>
<li>1:单用户</li>
<li>2:多用户状态没有网络服务</li>
<li>3:多用户有网络服务</li>
<li>4:系统未使用保留给用户</li>
<li>5:图形界面</li>
<li>6:系统重启</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>前端第02节，CSS的学习</title>
    <url>/posts/fddd121a/</url>
    <content><![CDATA[<h1 id="css学习"><a href="#css学习" class="headerlink" title="css学习"></a>css学习</h1><h2 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h2><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><p>标签选择器、类选择器、id选择器和通配符选择器</p>
<h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">p</span> class=&quot;red ...&quot;&gt;有意思&lt;/<span class="selector-tag">p</span>&gt; class调用类，一个或多个调用,可以多个类名，方便修改，减少代码量</span><br><span class="line"><span class="selector-class">.red</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">p</span> id=&quot;name&quot;&gt;故事与酒&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line"><span class="selector-id">#name</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>只能调用一次</p>
<h4 id="通配符选择器，选择所有的元素"><a href="#通配符选择器，选择所有的元素" class="headerlink" title="通配符选择器，选择所有的元素"></a>通配符选择器，选择所有的元素</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="文字属性"><a href="#文字属性" class="headerlink" title="文字属性"></a>文字属性</h2><p>color、font-size、font-family,font-weight,font-style<br>font-family-&gt;字体选择,可选择多个字体，”,”分隔<br>font-weight:normal&#x2F;bold&#x2F;lighter&#x2F;选择数字,没有单位<br>bold-&gt;粗体,bolder-&gt;特粗,lighter-&gt;细<br>font-style-&gt;字体样式-&gt;斜体…,italic-&gt;斜体,normal-&gt;不倾斜,较少使用</p>
<h3 id="复合使用"><a href="#复合使用" class="headerlink" title="复合使用"></a>复合使用</h3><p>不能颠倒顺序，空格隔开</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font</span>: font-style font-weight font-size font-family;</span><br></pre></td></tr></table></figure>
<h2 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h2><p>color,text-align,text-decoration,text-indent,line-hight<br>text-align-&gt;用于水平对齐<br>text-decoration-&gt;装饰，默认none(链接去掉下滑线),加下划线underline、删除线line-throught、上划线overline等<br>text-indent-&gt;首行缩进，em-&gt;代表一个文字的大小<br>line-hight-&gt;行间距，行间距包括上边距、文本高度和下边距 </p>
<h2 id="Emmet语法"><a href="#Emmet语法" class="headerlink" title="Emmet语法"></a>Emmet语法</h2><p>提高编写速度</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>*<span class="number">4</span></span><br><span class="line"><span class="selector-tag">ul</span>&gt;<span class="selector-tag">li</span></span><br><span class="line"><span class="selector-tag">div</span>+<span class="selector-tag">p</span></span><br><span class="line"><span class="selector-class">.nav</span> == &lt;<span class="selector-tag">div</span> class=&quot;<span class="selector-tag">nav</span>&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"><span class="selector-tag">span</span><span class="selector-class">.gray</span> == &lt;<span class="selector-tag">span</span> class=&quot;gray&quot;&gt;&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line"><span class="selector-class">.demo</span>$*<span class="number">5</span></span><br></pre></td></tr></table></figure>
<h2 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h2><h3 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="子选择器"><a href="#子选择器" class="headerlink" title="子选择器"></a>子选择器</h3><p>只能选择亲儿子</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>&gt;<span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>,<span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><p>伪类选择器用于某些选择器添加一些特殊的效果<br>最大的特点是用’:’表示，比如:hover,first-child</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 将没有选过的链接选择出来 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 将选择过的链接选择出来 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 鼠标经过的颜色(使用最多) */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 点击时的颜色 */</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line">指向获得光标的表单元素</span><br></pre></td></tr></table></figure>
<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>1.顺序-&gt;link-visited-hover-active<br>2.链接在浏览器有默认的样式，所以实际工作中需要给链接单独的样式</p>
<h2 id="元素的显示模式"><a href="#元素的显示模式" class="headerlink" title="元素的显示模式"></a>元素的显示模式</h2><p>块元素和行内元素<br>块级元素的特点：1.独占一行,2.宽度、高度、内外边距都可以控制，3.宽度默认是容器的100%，4.是一个容器及盒子，里面可以放行内或块级元素<br>注意事项：<br>文字类的元素内不能使用块级元素，p,h1-h6<br>行内元素的特点：1.一行可以显示多个 2.直接设置宽度和高度是无效的 3.宽度由本身决定 4.行内元素不能容纳块级元素<br>注意事项：<br>a里面不能在放a,a里面可以放块级元素<br>行内块元素特点：<br>img、input、td<br>1.一行可以显示多个，但是之间有空隙 2.默认宽度就是它本身的宽度 3.高度、行高、外边距以及内边距都可以控制。</p>
<h3 id="转换："><a href="#转换：" class="headerlink" title="转换："></a>转换：</h3><p>行内元素转为块级元素：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>块级元素转化为行内元素：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">display</span>: inline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>转换为行内块元素：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="文字垂直居中"><a href="#文字垂直居中" class="headerlink" title="文字垂直居中"></a>文字垂直居中</h2><p>行高等于盒子的高度</p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>背景颜色，背景图片，背景平铺、背景图片位置、背景图片固定等。<br>background-color<br>background-image:background-image: url(1.jfif);<br>background-repeat:repeat-&gt;平铺，no-repeat-&gt;不平铺，repeat-x沿x轴平铺，repeat-y沿y轴平铺<br>background-position:x , y;背景图片的位置<br>背景固定：background-attachment:scroll(默认),fixed固定<br>background:rgba(0,0,0,0.3)-&gt;设置背景透明,0全透明，1不透明</p>
<img src="/posts/fddd121a/bg.png" class title="图片">

<h2 id="css三大特性"><a href="#css三大特性" class="headerlink" title="css三大特性"></a>css三大特性</h2><h3 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h3><p>就近原则，解决冲突</p>
<h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><p>孩子继承父亲，简化代码</p>
<h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><img src="/posts/fddd121a/Snipaste_2022-07-15_21-44-04.png" class title="图片">
<p>继承的权重为0</p>
<h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><p>包含：边框，外边距，内边距和实际内容</p>
<img src="/posts/fddd121a/Snipaste_2022-07-15_22-19-04.png" class title="图片">
<h3 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h3><p>宽度，边框样式，边框颜色<br>border-width:大小<br>border-style：solid实线,dash虚线,dotted点线<br>border-color<br>复合式写法没有顺序<br>border-top…<br>border-collapse: collapse-&gt;合并单元格</p>
<h5 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h5><p>盒子添加边框盒子大小增大</p>
<h4 id="内边距"><a href="#内边距" class="headerlink" title="内边距"></a>内边距</h4><p>padding(top,left,bottom,right)<br>复合顺序：</p>
<img src="/posts/fddd121a/Snipaste_2022-07-15_22-37-26.png" class title="图片">
<h5 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项:"></a>注意事项:</h5><p>padding会影响盒子的实际大小，减去多出来的内边距<br>如果盒子本身没有指定的weight和height，则padding不会撑大盒子</p>
<h3 id="外边距"><a href="#外边距" class="headerlink" title="外边距"></a>外边距</h3><p>margin(left,right,right,bottom)控制盒子之间的距离,简写方式与padding相似</p>
<h4 id="典型应用"><a href="#典型应用" class="headerlink" title="典型应用"></a>典型应用</h4><p>盒子水平居中<br>1.盒子指定了宽度<br>2.盒子左右的外边距都设置为auto</p>
<h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>行内元素或者行内块元素居中需要给父亲元素添加text-align: center;</p>
<h4 id="外边距合并"><a href="#外边距合并" class="headerlink" title="外边距合并"></a>外边距合并</h4><p>1.为父元素添加上边框<br>2.可以为父元素定义上内边框<br>3.可以给父亲添加overflow:hidden;</p>
<h4 id="清楚内外边距"><a href="#清楚内外边距" class="headerlink" title="清楚内外边距"></a>清楚内外边距</h4><p>css的第一行代码</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="圆角矩形"><a href="#圆角矩形" class="headerlink" title="圆角矩形"></a>圆角矩形</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br></pre></td></tr></table></figure>
<h2 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h2><img src="/posts/fddd121a/Snipaste_2022-07-16_20-28-07.png" class title="图片">
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span> black;</span><br></pre></td></tr></table></figure>
<p>阴影不占用空间</p>
<h2 id="文字阴影-了解"><a href="#文字阴影-了解" class="headerlink" title="文字阴影(了解)"></a>文字阴影(了解)</h2><img src="/posts/fddd121a/Snipaste_2022-07-16_20-37-36.png" class title="图片">
<h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><p>float属性用于创建浮动框，将其移动到一边，直到左边缘或右边缘触及包含块级或另一个浮动框的边缘</p>
<h3 id="浮动特性-重难点"><a href="#浮动特性-重难点" class="headerlink" title="浮动特性(重难点)"></a>浮动特性(重难点)</h3><p>1.浮动元素会脱离标准流</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">1.脱离标准普通流的控制移动到指定的位置</span><br><span class="line">2.浮动的盒子不在保留原有的位置</span><br></pre></td></tr></table></figure>
<p>2.浮动的元素会一行内显示并且元素顶部对齐<br>3.浮动的元素会具有行内块的特性</p>
<h3 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h3><p>1.浮动和标准流的父盒子搭配<br>2.一个盒子浮动了，理论上其余的兄弟元素也要浮动<br>3.父盒子不方便给高度时，需要清除浮动</p>
<h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><p>清除浮动就是清除浮动元素造成的影响,如果父盒子本身有高度，则不需要清除浮动，清除浮动后，父级就会根据子盒子自动检测高度。父级有了高度，就不会影响下面的标准流。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">clear</span>:both;</span><br></pre></td></tr></table></figure>
<p>清除浮动的策略是，闭合浮动。</p>
<h4 id="清除浮动的方法"><a href="#清除浮动的方法" class="headerlink" title="清除浮动的方法"></a>清除浮动的方法</h4><p>1.额外标签法也称隔墙法，是W3C推荐的做法。<br>2.父级添加overflow属性(overflow:hidden,auto)<br>3.父级添加after伪元素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">    *zoom: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4.父级添加双伪元素。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>,clearfix<span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clerafix</span>&#123;</span><br><span class="line">    *zoom: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="css书写顺序-重点"><a href="#css书写顺序-重点" class="headerlink" title="css书写顺序(重点)"></a>css书写顺序(重点)</h2><img src="/posts/fddd121a/Snipaste_2022-07-17_11-42-40.png" class title="图片">
<h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><p>1.某个元素可以自由的在一个盒子内移动位置，并且压住其他盒子<br>2.当我们滚动窗口的时候，盒子是固定屏幕某个位置的<br>定位&#x3D;定位模式+边偏移</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">position</span></span><br><span class="line"><span class="attribute">top</span>、<span class="attribute">bottom</span>、<span class="attribute">left</span>、<span class="attribute">right</span></span><br></pre></td></tr></table></figure>
<img src="/posts/fddd121a/Snipaste_2022-07-17_15-41-00.png" class title="图片">
<h3 id="静态定位stalic-了解"><a href="#静态定位stalic-了解" class="headerlink" title="静态定位stalic(了解)"></a>静态定位stalic(了解)</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">position</span>: stalic;</span><br></pre></td></tr></table></figure>
<h3 id="相对定位-relative-重要"><a href="#相对定位-relative-重要" class="headerlink" title="相对定位 relative(重要)"></a>相对定位 relative(重要)</h3><p>1.它是相对于自己原来的位置来移动的(移动位置的时候是参照自己原来的位置)<br>2.原来在标准流的位置继续占用，后面的盒子仍然以标准流的方式对待它。(不脱标，继续保留原来的位置)</p>
<h3 id="绝对定位-absolute-重要"><a href="#绝对定位-absolute-重要" class="headerlink" title="绝对定位 absolute(重要)"></a>绝对定位 absolute(重要)</h3><p>1.如果没有祖先单位或者祖先单位没有定位，则以浏览器为准单位。<br>2.如果祖先元素有定位，则以最近一级的祖先元素为参考点移动位置<br>3.绝对定位不占有原来的位置(脱标);</p>
<h3 id="子绝父相"><a href="#子绝父相" class="headerlink" title="子绝父相"></a>子绝父相</h3><h3 id="固定定位-fixed-重要"><a href="#固定定位-fixed-重要" class="headerlink" title="固定定位 fixed(重要)"></a>固定定位 fixed(重要)</h3><p>1.以浏览器的可视窗口为参展点移动元素。(跟父元素无关)<br>2.固定定位不在占有原来的位置</p>
<h4 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h4><p>固定在版心右侧位置</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">400px</span>;</span><br></pre></td></tr></table></figure>
<h3 id="粘性定位"><a href="#粘性定位" class="headerlink" title="粘性定位"></a>粘性定位</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">position</span>: sticky;<span class="attribute">top</span>: <span class="number">10px</span>;</span><br></pre></td></tr></table></figure>
<p>1.以浏览器的可视窗口为参照点移动元素<br>2.粘性定位占有原先的位置<br>3.必须添加top、right、left、bottom</p>
<h3 id="定位叠放顺序"><a href="#定位叠放顺序" class="headerlink" title="定位叠放顺序"></a>定位叠放顺序</h3><p>定位才有这个属性</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">数值越大，越上面</span><br></pre></td></tr></table></figure>
<h2 id="元素的显示与隐藏"><a href="#元素的显示与隐藏" class="headerlink" title="元素的显示与隐藏"></a>元素的显示与隐藏</h2><p>display:none;隐藏元素，也不占有位置<br>display:block;显示元素<br>visibility:inherit;<br>visibility:visible;显示<br>visibility:hidden;隐藏,保留位置<br>overflow溢出的显示与否<br>默认是visible，hidden隐藏,scroll显示滚动条,auto需要的时候添加滚动条</p>
]]></content>
  </entry>
  <entry>
    <title>前端第03节，WEB_APIS的学习</title>
    <url>/posts/2b608c52/</url>
    <content><![CDATA[<h1 id="Web-APIs"><a href="#Web-APIs" class="headerlink" title="Web APIs"></a>Web APIs</h1><h2 id="作用和分类"><a href="#作用和分类" class="headerlink" title="作用和分类"></a>作用和分类</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>使用JS去操作html和浏览器</p>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>DOM、BOM</p>
<h4 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h4><p>DOM是浏览器提供的一套专门用来操作网页内容的功能，开发网页内容特效和用户交互</p>
<h5 id="DOM树"><a href="#DOM树" class="headerlink" title="DOM树"></a>DOM树</h5><p>将HTML文档以树状结构直观的表现出来，我们称之为文档或DOM树<br>描述网页内容关系的名词<br>作用：文档树直观的体现了标签与标签之间的关系</p>
<img src="/posts/2b608c52/Snipaste_2022-07-25_19-39-37.png" class title="图片">
<h5 id="DOM对象"><a href="#DOM对象" class="headerlink" title="DOM对象"></a>DOM对象</h5><p>浏览器根据html标签生成的JS对象，把网页内容当作对象来处理</p>
<h5 id="获取DOM元素"><a href="#获取DOM元素" class="headerlink" title="获取DOM元素"></a>获取DOM元素</h5><h6 id="根据css选择器来获取DOM元素"><a href="#根据css选择器来获取DOM元素" class="headerlink" title="根据css选择器来获取DOM元素"></a>根据css选择器来获取DOM元素</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">document.querySelector(&#x27;css选择器&#x27;)</span><br><span class="line"><span class="comment">&lt;!-- 只能得到第一个元素 --&gt;</span></span><br><span class="line">document.querySelectorAll(&#x27;css选择器&#x27;)</span><br><span class="line"><span class="comment">&lt;!-- 获取所有元素 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 返回得到对象集合 --&gt;</span></span><br></pre></td></tr></table></figure>
<h6 id="对象-innerText"><a href="#对象-innerText" class="headerlink" title="对象.innerText"></a>对象.innerText</h6><p>不识别标签</p>
<h6 id="对象-innerHTML"><a href="#对象-innerHTML" class="headerlink" title="对象.innerHTML"></a>对象.innerHTML</h6><p>可以解析标签</p>
<h6 id="通过style修改样式属性"><a href="#通过style修改样式属性" class="headerlink" title="通过style修改样式属性"></a>通过style修改样式属性</h6><p>对象.style.样式属性 &#x3D; 值</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">document<span class="selector-class">.body</span><span class="selector-class">.style</span><span class="selector-class">.backgroundImage</span> = `<span class="built_in">url</span>()`</span><br></pre></td></tr></table></figure>
<h6 id="修改元素操作类"><a href="#修改元素操作类" class="headerlink" title="修改元素操作类"></a>修改元素操作类</h6><figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">元素.className = <span class="symbol">&#x27;one</span> active&#x27;</span><br></pre></td></tr></table></figure>
<h6 id="操作类数组"><a href="#操作类数组" class="headerlink" title="操作类数组"></a>操作类数组</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">元素.classList.add(&#x27;类名&#x27;)</span><br><span class="line"><span class="comment">&lt;!-- 增加类 --&gt;</span></span><br><span class="line">元素.classList.remove(&#x27;类名&#x27;)</span><br><span class="line"><span class="comment">&lt;!-- 删除类 --&gt;</span></span><br><span class="line">元素.classList.toggle(&#x27;类名&#x27;)</span><br><span class="line"><span class="comment">&lt;!-- 切换类 --&gt;</span></span><br></pre></td></tr></table></figure>
<h6 id="修改表单属性"><a href="#修改表单属性" class="headerlink" title="修改表单属性"></a>修改表单属性</h6><figure class="highlight xl"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">input</span>.value-&gt;</span>修改表单值</span><br><span class="line"><span class="function"><span class="title">input</span>.type-&gt;</span>修改表单类型</span><br><span class="line"><span class="function"><span class="title">btn</span>.disabled = <span class="literal">false</span> -&gt;</span> 按钮可用</span><br><span class="line"><span class="function"><span class="title">checkbox</span>.checked = <span class="literal">true</span> -&gt;</span> 勾选复选框</span><br></pre></td></tr></table></figure>
<h6 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">let 变量名 = setInterval(函数,间隔时间)</span><br><span class="line"><span class="comment">&lt;!-- 每个一段时间调用这个函数，函数不加小括号 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 间隔时间为ms --&gt;</span></span><br><span class="line">clearInterval(变量名)</span><br></pre></td></tr></table></figure>
<h5 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h5><ul>
<li>事件是编程时系统内发生的动作或者发生的事情</li>
</ul>
<h6 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h6><ul>
<li>让程序检测是否有事件发生，一旦有事件触发，就立即调用一个函数做出响应，也成为注册事件<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">元素<span class="selector-class">.addEventListener</span>(<span class="string">&#x27;事件&#x27;</span>,要执行的函数)</span><br></pre></td></tr></table></figure></li>
</ul>
<h6 id="事件监听三要素"><a href="#事件监听三要素" class="headerlink" title="事件监听三要素"></a>事件监听三要素</h6><ul>
<li>事件源：哪个dom元素被事件触发了，要获取dom元素</li>
<li>事件：用什么方式触发，比如鼠标单击click，鼠标经过mouseover</li>
<li>事件调用的函数：要做什么事<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;点击&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h6 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h6><img src="/posts/2b608c52/Snipaste_2022-07-24_18-23-38.png" class title="图片">
<h5 id="高级函数"><a href="#高级函数" class="headerlink" title="高级函数"></a>高级函数</h5><p>高级函数可以简单理解为函数的高级应用，JavaScript中函数可以被当成【值】来对待，基于这个特性实现函数的高级应用</p>
<h6 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h6><p>常见：定时器，事件监听</p>
<h5 id="环境对象"><a href="#环境对象" class="headerlink" title="环境对象"></a>环境对象</h5><p>环境对象指的是函数内特殊的变量this，它代表着当前函数运行时所处的环境<br>作用：弄清楚this的指向，可以让我们的代码更简洁</p>
<h4 id="DOM结点"><a href="#DOM结点" class="headerlink" title="DOM结点"></a>DOM结点</h4><h5 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h5><h6 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h6><p>1.元素节点<br>所有的标签 比如body,div<br>html是根节点<br>2.属性节点<br>所有的属性，比如href<br>3.文本节点<br>所有的文本</p>
<h6 id="查找节点"><a href="#查找节点" class="headerlink" title="查找节点"></a>查找节点</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父节点查找 --&gt;</span></span><br><span class="line">子元素.parentNode</span><br><span class="line">返回最近一级的父节点，找不到返回null</span><br><span class="line"><span class="comment">&lt;!-- 子节点查找 --&gt;</span></span><br><span class="line">父元素.children //得到的是数组</span><br><span class="line"><span class="comment">&lt;!-- 兄弟关系查找 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 下一个兄弟节点 --&gt;</span></span><br><span class="line">nextElementSibling 属性</span><br><span class="line"><span class="comment">&lt;!-- 上一个兄弟节点 --&gt;</span></span><br><span class="line">previousElmentSibling 属性</span><br></pre></td></tr></table></figure>
<h6 id="增加节点"><a href="#增加节点" class="headerlink" title="增加节点"></a>增加节点</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">document.createElement(&#x27;标签名&#x27;)</span><br><span class="line"><span class="comment">&lt;!-- 追加节点 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 插入到父元素的最后一个子元素 --&gt;</span></span><br><span class="line">父元素.appendChild(要插入的元素)</span><br><span class="line"><span class="comment">&lt;!-- 插入到父元素中某个子元素的前面 --&gt;</span></span><br><span class="line">父元素.insertBefore(要插入的元素,在哪个元素前面)</span><br></pre></td></tr></table></figure>
<h6 id="克隆和删除节点"><a href="#克隆和删除节点" class="headerlink" title="克隆和删除节点"></a>克隆和删除节点</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 克隆节点 --&gt;</span></span><br><span class="line">元素.cloneNode(布尔值)</span><br><span class="line">布尔值若为true，则代表克隆时会包含后代节点一起克隆</span><br><span class="line">若为false,则不代表后代节点</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 删除节点 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1.若一个节点在页面中已不需要时，可以删除它 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在Javascript中，原生DOM操作中，要删除必须通过父元素删除，否则删除失败 --&gt;</span></span><br><span class="line">父元素.removeChild(要删除的元素)</span><br></pre></td></tr></table></figure>
<h5 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h5><p>类-&gt;对象</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="built_in">date</span> = <span class="literal">new</span> <span class="built_in">Date</span>()</span><br><span class="line"><span class="keyword">let</span> <span class="built_in">date</span> = <span class="literal">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;1949-10-01 18:30:00&#x27;</span>) <span class="comment">// 指定时间</span></span><br></pre></td></tr></table></figure>
<h6 id="时间对象方法"><a href="#时间对象方法" class="headerlink" title="时间对象方法"></a>时间对象方法</h6><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">getFullYear</span><span class="params">()</span></span>获得年份</span><br><span class="line"><span class="function"><span class="title">getMouth</span><span class="params">()</span></span>获得月份(<span class="number">0</span>-<span class="number">11</span>)</span><br><span class="line"><span class="function"><span class="title">getDate</span><span class="params">()</span></span>获取月份的天数</span><br><span class="line"><span class="function"><span class="title">getDay</span><span class="params">()</span></span>获得星期(<span class="number">0</span>-<span class="number">6</span>)</span><br><span class="line"><span class="function"><span class="title">GetHours</span><span class="params">()</span></span>获得小时(<span class="number">0</span>-<span class="number">23</span>)</span><br><span class="line"><span class="function"><span class="title">getMinutes</span><span class="params">()</span></span>获得分钟(<span class="number">0</span>-<span class="number">59</span>)</span><br><span class="line"><span class="function"><span class="title">getSeconds</span><span class="params">()</span></span>获得秒(<span class="number">0</span>-<span class="number">59</span>)</span><br></pre></td></tr></table></figure>
<h6 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h6><p>是指1970年01月01日00时00分00秒起到现在的毫秒数</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 获取时间戳 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用getTime方法 --&gt;</span></span><br><span class="line">let date = new Date()</span><br><span class="line">date.getTime()</span><br><span class="line"><span class="comment">&lt;!-- 简写 --&gt;</span></span><br><span class="line">+new Date()</span><br><span class="line"><span class="comment">&lt;!-- 第三种 --&gt;</span></span><br><span class="line">Date.now()</span><br></pre></td></tr></table></figure>
<h5 id="事件对象-1"><a href="#事件对象-1" class="headerlink" title="事件对象"></a>事件对象</h5><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"><span class="keyword">event</span>,ev,e</span><br><span class="line">元素.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span><span class="params">(e)</span><span class="comment">&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span>)</span><br></pre></td></tr></table></figure>
<h6 id="事件对象常用属性"><a href="#事件对象常用属性" class="headerlink" title="事件对象常用属性"></a>事件对象常用属性</h6><ul>
<li>type-&gt;获取当前的事件类型</li>
<li>clientX&#x2F;clientY-&gt;获取光标相对于浏览器可见窗口左上角的位置</li>
<li>offsetX&#x2F;offsetY-&gt;获取光标相对于当前DOM元素左上角的位置</li>
<li>key-&gt;用户按下键盘的值</li>
</ul>
<h6 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h6><p>事件冒泡：当一个元素的事件被触发时，同样的事件将会在该元素的所有祖先元素中依次被触发<br>阻止事件流动:</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">son.add<span class="constructor">EventListener(&#x27;<span class="params">click</span>&#x27;,<span class="params">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            alert(<span class="number">1</span>)</span><br><span class="line">            e.stop<span class="constructor">Propagation()</span></span><br><span class="line">            </span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>
<p>事件捕获：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">DOM</span>.</span></span>add<span class="constructor">EventListener(事件类型，事件处理函数，是否使用捕获机制)</span></span><br></pre></td></tr></table></figure>
<h6 id="鼠标经过事件"><a href="#鼠标经过事件" class="headerlink" title="鼠标经过事件"></a>鼠标经过事件</h6><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mouseover</span>()和<span class="built_in">mouseout</span>()会有冒泡效果</span><br><span class="line"><span class="built_in">mouseenter</span>()和<span class="built_in">mouseleave</span>()没有冒泡效果(推荐)</span><br></pre></td></tr></table></figure>
<h6 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h6><h5 id="滚动时间和加载事件"><a href="#滚动时间和加载事件" class="headerlink" title="滚动时间和加载事件"></a>滚动时间和加载事件</h5><h6 id="滚动事件"><a href="#滚动事件" class="headerlink" title="滚动事件"></a>滚动事件</h6><p>事件名：scroll</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h6 id="加载事件"><a href="#加载事件" class="headerlink" title="加载事件"></a>加载事件</h6><p>加载外部资源(如图片，外联css和javascript)，加载完毕触发的事件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h5 id="元素大小和位置"><a href="#元素大小和位置" class="headerlink" title="元素大小和位置"></a>元素大小和位置</h5><h6 id="scroll家族"><a href="#scroll家族" class="headerlink" title="scroll家族"></a>scroll家族</h6><p>可以用来检测页面滚动的距离<br>scrollWidth和scrollHeight，获取自身内容的宽和高<br>scrollTop和scrollLeft，获取元素向左向上滚出去看不到的距离，是可读写的属性</p>
<!-- 复制不要给单位 -->
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>);</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>
<h6 id="offset家族"><a href="#offset家族" class="headerlink" title="offset家族"></a>offset家族</h6><p>获取宽高：<br>获取元素的自身高度、包含元素自身设置的宽高、padding、border<br>offsetWidth和offsetHeight<br>获取位置：<br>获取元素距离自己定位父级元素的左、上距离<br>offsetLeft和offsetTop 注意是只读属性</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">document.documentElement.scrollTop</span> = neirongs[i].<span class="literal">off</span>setTop</span><br></pre></td></tr></table></figure>
<img src="/posts/2b608c52/Snipaste_2022-07-27_11-09-45.png" class title="图片">
<h6 id="client家族"><a href="#client家族" class="headerlink" title="client家族"></a>client家族</h6><p>获取宽高：<br>获取元素的可见部分宽高(不包含边框，滚动条等)<br>clientWidth和clientHeight<br>获取位置：<br>clientLeft和clientTop得到上边框和左边框的宽度(只读属性)<br>窗口尺寸改变的时候触发事件：</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 得到当前屏幕的尺寸 --&gt;</span></span></span><br><span class="line"><span class="language-xml">window.addEventListener(&#x27;resize&#x27;,function()</span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable"></span></span><br><span class="line"><span class="template-variable">&#125;</span><span class="language-xml">)</span></span><br></pre></td></tr></table></figure>
<img src="/posts/2b608c52/Snipaste_2022-07-27_16-40-38.png" class title="图片">
<h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h6><img src="/posts/2b608c52/Snipaste_2022-07-27_16-43-20.png" class title="图片">
<h5 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h5><ul>
<li>BOM(浏览器对象模型)</li>
<li>定时器-延迟函数</li>
<li>JS执行机制</li>
<li>location对象</li>
<li>navigator对象</li>
<li>history对象</li>
</ul>
<h6 id="BOM-Browser-Object-Model-是浏览器对象模型"><a href="#BOM-Browser-Object-Model-是浏览器对象模型" class="headerlink" title="BOM(Browser Object Model)是浏览器对象模型"></a>BOM(Browser Object Model)是浏览器对象模型</h6><img src="/posts/2b608c52/Snipaste_2022-07-27_17-23-24.png" class title="图片">
<h6 id="定时器-延迟函数"><a href="#定时器-延迟函数" class="headerlink" title="定时器-延迟函数"></a>定时器-延迟函数</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">setTimeout(回调函数，等待的毫秒数)</span><br><span class="line"><span class="comment">&lt;!-- 执行一次 --&gt;</span></span><br><span class="line">let timer = setTimeout(回调函数，等待的毫秒数)</span><br><span class="line">clearTimeout(timer)</span><br></pre></td></tr></table></figure>
<img src="/posts/2b608c52/Snipaste_2022-07-27_17-58-43.png" class title="图片">
<h6 id="JS执行机制"><a href="#JS执行机制" class="headerlink" title="JS执行机制"></a>JS执行机制</h6><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">javaScript语言的一大特点就是单线程，同一时间只能做一件事</span></span><br><span class="line"><span class="keyword"></span>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务</span><br></pre></td></tr></table></figure>
<p>同步和异步：为了解决这个问题，利用多核CPU的计算能力,HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程。于是，JS中出现了同步和异步<br>同步：前一个任务结束后再执行后一个任务，程序的执行顺序与任务的排列顺序是一致的<br>异步：在做这件事的同时，可以去处理其他事情</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">1.先执行执行栈中的同步任务</span><br><span class="line">2.异步任务放入到任务队列中</span><br><span class="line">3.一旦执行栈中的所有同步任务执行完毕，系统会按次序读取任务队列中的异步任务，于是被读取的异步任务结束等待状态，进入执行栈，开始执行。</span><br></pre></td></tr></table></figure>
<h6 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h6><p>常见属性和方法<br>href属性获取完整的URL地址，对其赋值时用于地址的跳转</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">location.href</span><br><span class="line"><span class="comment">&lt;!-- 可以修改，实现页面跳转 --&gt;</span></span><br></pre></td></tr></table></figure>
<p>search属性获取地址中携带的参数，符号?后面部分</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">location</span>.<span class="keyword">search</span></span><br></pre></td></tr></table></figure>
<p>hash属性返回获取地址中的哈希值，符号#后面部分</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">location.<span class="built_in">hash</span></span><br></pre></td></tr></table></figure>
<p>reload方法用来刷新当前页面，传入参数true时表示刷新</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">location</span>.reload(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure>
<p>history对象<br>方法：<br>back()   &#x2F;&#x2F;后退功能<br>forward()&#x2F;&#x2F;前进功能<br>go(参数)  &#x2F;&#x2F;前进或后退,参数是1前进,参数是-1是后退</p>
<h5 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h5><ul>
<li>数据存储在用户浏览器中</li>
<li>设置、读取方便、甚至页面刷新不会丢失数据</li>
<li>容量较大，sessionStorage和localStorage约5M左右</li>
</ul>
<h6 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h6><ul>
<li>生命周期永久生效，除非手动删除，否则关闭页面也会存在</li>
<li>可以多窗口共享</li>
<li>以键值对的形式存储使用</li>
</ul>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">存储数据：</span><br><span class="line">localStorage.setltem(<span class="built_in">key</span>,value)</span><br><span class="line">获取数据：</span><br><span class="line">localStorage.getltem(<span class="built_in">key</span>)</span><br><span class="line">删除数据：</span><br><span class="line">localStorage.removeltem(<span class="built_in">key</span>)</span><br></pre></td></tr></table></figure>
<p>本地只能存储字符串，无法存储复杂数据类型。需要将复杂数据类型转换成JSON字符串</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(复杂数据类型)</span><br><span class="line">将复杂数据类型转换成<span class="built_in">JSON</span>字符串，存储在本地存储中</span><br><span class="line"><span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>字符串)</span><br><span class="line">将<span class="built_in">JSON</span>字符串转换成对象，取出时候使用</span><br></pre></td></tr></table></figure>
<h5 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h5><ul>
<li>正则表达式(Regular Expression)是用于匹配字符串中字符组合的模式。在JavaScript中，正则表达式也是对象</li>
<li>通常用来查找、替换那些符合正则表达式的文本，许多语言都支持正则表达式<br>作用：<br>用于匹配字符串中字符组合的模式<br>表单验证<br>过滤敏感词<br>字符串提取我们想要的部分<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- let arr = /表达式/ --&gt;</span></span><br><span class="line">regObj.test(被检查的字符串)//返回值为true或false</span><br><span class="line">regObj.exec(被检测的字符串)//返回值为数组</span><br></pre></td></tr></table></figure></li>
</ul>
<h6 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h6><p>边界符：’^’-&gt;表示匹配行首的文本,’$’表示匹配行尾的文本</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="regexp">/哈/</span>.test(<span class="string">&#x27;哈哈&#x27;</span>))</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="regexp">/哈/</span>.test(<span class="string">&#x27;二哈&#x27;</span>))</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="regexp">/^哈/</span>.test(<span class="string">&#x27;二哈&#x27;</span>))</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="regexp">/哈$/</span>.test(<span class="string">&#x27;二哈&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p>量词：</p>
<img src="/posts/2b608c52/Snipaste_2022-07-28_11-02-11.png" class title="图片">
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="regexp">/a/</span>.test(<span class="string">&#x27;a&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="regexp">/a*/</span>.test(<span class="string">&#x27;a&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="regexp">/a+/</span>.test(<span class="string">&#x27;b&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="regexp">/a?/</span>.test(<span class="string">&#x27;b&#x27;</span>));</span><br></pre></td></tr></table></figure>
<p>字符类：<br>[]匹配字符合集<br>后面只要包含abc中任意一个字符，都返回true<br>[a-zA-Z0-9]不区分大小写<br>[1-9][0-9]{4,}-&gt;第一位1-9,第二位0-9,大于4位<br>[^a-z]-&gt;除小写字符</p>
<img src="/posts/2b608c52/Snipaste_2022-07-28_11-53-57.png" class title="图片">
<p>修饰符：<br>i是ignore的缩写，正则匹配时字母不区分大小写<br>g是global的意思，匹配所有满足正则表达式的结果</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="regexp">/a/i</span>.test(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="regexp">/a/i</span>.test(<span class="string">&#x27;A&#x27;</span>))</span><br><span class="line">&lt;!-- 替换 --&gt;</span><br><span class="line">字符串.<span class="built_in">replace</span>(<span class="regexp">/正则表达式/</span>,<span class="string">&#x27;替换的文本&#x27;</span>)</span><br><span class="line">div.innerHTML = textarea.value.<span class="built_in">replace</span>(<span class="regexp">/傻逼|基情/g</span>,<span class="string">&#x27;**&#x27;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>红黑树</title>
    <url>/posts/f89cb603/</url>
    <content><![CDATA[<h1 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h1><h2 id="一、分析题目要求"><a href="#一、分析题目要求" class="headerlink" title="一、分析题目要求"></a>一、分析题目要求</h2><h4 id="1-题目分析"><a href="#1-题目分析" class="headerlink" title="1.题目分析"></a>1.题目分析</h4><p>&amp;emsp;&amp;emsp;实现红黑树的初始化、插入、删除、查询、三种遍历方式、求红黑树的元素个数、求红黑树的深度。</p>
<h4 id="2-函数说明"><a href="#2-函数说明" class="headerlink" title="2.函数说明"></a>2.函数说明</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rbTree_insert</span><span class="params">(RBT_Root* *T, <span class="type">int</span> k)</span></span>;<span class="comment">//红黑树的插入，T为树根的指针，k为插入值，返回值为空</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rbTree_delete</span><span class="params">(RBT_Root* *T, <span class="type">int</span> k)</span></span>;<span class="comment">//红黑树的删除，T为树根的指针，k为删除值，返回值为空</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RB_Insert_Fixup</span><span class="params">(RBT_Root* T, RB_TREE* x)</span></span>;<span class="comment">//对红黑树的调整，T为树根，x为插入的结点，返回值为空</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rbTree_transplant</span><span class="params">(RBT_Root* T, RB_TREE* u, RB_TREE* v)</span></span>;<span class="comment">//结点移动，T为红黑树树根，u为需要删除的结点，v为需要移动的结点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rbTree_left_rotate</span><span class="params">( RBT_Root* T, RB_TREE* x)</span></span>;<span class="comment">//左旋操作，x为需要左旋的结点，T为根节点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rbTree_right_rotate</span><span class="params">( RBT_Root* T, RB_TREE* x)</span></span>;<span class="comment">//右旋操作，x为需要右旋的结点，T为根节点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rbTree_inPrint</span><span class="params">(RBT_Root* T, RB_TREE* t)</span></span>;<span class="comment">//中序遍历，T为树根</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rbTree_prePrint</span><span class="params">(RBT_Root * T, RB_TREE* t)</span></span>;<span class="comment">//前序遍历，T为树根</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rbTree_print</span><span class="params">(RBT_Root* T)</span></span>;<span class="comment">//遍历，T为树根</span></span><br><span class="line"><span class="function">RB_TREE* <span class="title">rbt_findMin</span><span class="params">(RBT_Root * T, RB_TREE* t)</span></span>;<span class="comment">//查找最小值结点，t为根节点，返回最小值的结点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rbTree_search</span><span class="params">(RBT_Root* T,<span class="type">int</span> key)</span></span>;<span class="comment">//查询操作，T为树根，key为需要查找的值</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//红黑树的初始化</span></span><br><span class="line">    <span class="built_in">RBT</span>();</span><br><span class="line">    <span class="comment">//求红黑树的深度</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">depth</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//求红黑树元素的个数</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//红黑树增加元素</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> key)</span></span>;</span><br><span class="line">    <span class="comment">//红黑树前序遍历</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pt</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//红黑树的中序遍历</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">it</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//红黑树的后序遍历</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pot</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//红黑树的查找元素</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">search</span><span class="params">(<span class="type">int</span> key)</span></span>;</span><br><span class="line">    <span class="comment">//红黑树的删除元素</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> key)</span></span>;</span><br></pre></td></tr></table></figure>
<h4 id="3-输入、输出和功能"><a href="#3-输入、输出和功能" class="headerlink" title="3.输入、输出和功能"></a>3.输入、输出和功能</h4><p>输入为int整形，输出为红黑树的前序遍历和中序遍历，功能实现了红黑树的初始化、插入、删除和查找、求红黑树的元素个数，红黑树的深度，红黑树的三种遍历方式。</p>
<h2 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h2><h4 id="红黑树的定义"><a href="#红黑树的定义" class="headerlink" title="红黑树的定义"></a>红黑树的定义</h4><p>1.节点颜色有红色和黑色<br>2.根节点必为黑色<br>3.所有叶子节点都是黑色<br>4.任意节点到叶子节点经过的黑色节点数目相同<br>5.不会有连续的红色节点</p>
<h4 id="1-红黑树的初始化"><a href="#1-红黑树的初始化" class="headerlink" title="1.红黑树的初始化"></a>1.红黑树的初始化</h4><p>创建RBT_Root，根结点和叶子结点赋初始左右子树为空，且颜色为黑。</p>
<h4 id="2-红黑树的插入"><a href="#2-红黑树的插入" class="headerlink" title="2.红黑树的插入"></a>2.红黑树的插入</h4><p>分情况讨论：<br>1.当父亲为祖父的左儿子：</p>
<ul>
<li>父亲和叔叔都是红色，将父亲和叔叔变成黑色，祖父变成红色，继续对祖父进行调整</li>
<li>叔叔是黑色，自己是父亲的左儿子：父亲变成黑色，祖父变成红色；对祖父进行右旋以满足红黑规则；此时节点不满足循环条件，可以退出循环。</li>
<li>叔叔是黑色，自己是父亲的右儿子：父亲成为新的X，对父亲执行左旋操作，构造情况2；按照情况2继续进行处理<br>2.当父亲为祖父的右儿子：</li>
<li>父亲和叔叔都是红色，将父亲和叔叔变成黑色，祖父变成红色，继续对祖父进行调整</li>
<li>叔叔是黑色，自己是父亲的左儿子：父亲变成黑色，祖父变成红色；对祖父进行左旋以满足红黑规则；此时节点不满足循环条件，可以退出循环。</li>
<li>叔叔是黑色，自己是父亲的右儿子：父亲成为新的X，对父亲执行右旋操作，构造情况2；按照情况2继续进行处理</li>
</ul>
<h4 id="3-红黑树的删除"><a href="#3-红黑树的删除" class="headerlink" title="3.红黑树的删除"></a>3.红黑树的删除</h4><p>1.如果删除节点D有左右孩子，将删除节点的值替换为删除节点前驱节点的值，然后再删除前驱结点。删除前驱结点的操作更简单。</p>
<p>2.如果删除节点D只有左孩子LC，没有右孩子。将D的值替换成LC的值，然后将LC删除。</p>
<p>3.如果删除节点D只有右孩子RC，没有左孩子。将D的值替换成RC的值，然后将RC删除。</p>
<p>4.如果删除节点D是叶子结点，且为红色。直接删除。</p>
<p>5.如果删除节点D是叶子节点，为黑色。<br>&amp;emsp;&amp;emsp;(1).如果兄弟节点B为黑色，也为叶子结点。删除节点D，父亲节点P变成黑色，B节点变成红色。<br>&amp;emsp;&amp;emsp;(2).如果兄弟节点B为黑色，不为叶子结点，如下图，有（1），（2），（3）种情况。删除节点D，然后进行旋转。旋转后前三个节点的颜色和旋转前 前三个节点对应的颜色相同。删除后如果有第四个节点，第四个节点为红色。<br><img src="/%E7%BA%A2%E9%BB%91%E6%A0%91-1%5Cpicture.png" alt="Alt text"><br>&amp;emsp;&amp;emsp;(3).如果兄弟节点为红色，则删除节点D，然后进行旋转操作。最后，前三个节点为黑色，最后一个节点为红色。</p>
<h4 id="4-查询"><a href="#4-查询" class="headerlink" title="4.查询"></a>4.查询</h4><p>将传入的key与结点值比较，大于结点值，与该结点的右子树的值进行比较，否则与该结点的左子树相比较，循环往复，直到查找成功或不存在该结点值。查找成功输出是RED或BLACK和查找值，否则输出未查找到该值。</p>
<h2 id="三、调试分析"><a href="#三、调试分析" class="headerlink" title="三、调试分析"></a>三、调试分析</h2><h4 id="测试分析"><a href="#测试分析" class="headerlink" title="测试分析"></a>测试分析</h4><img src="/posts/f89cb603/maincode.png" class title="图片">
<img src="/posts/f89cb603/output.png" class title="图片">

<h4 id="经验与体会"><a href="#经验与体会" class="headerlink" title="经验与体会"></a>经验与体会</h4><p>&amp;emsp;&amp;emsp; 在最开始选择红黑树的原因是：在学习C++的STL容器中了解到set、multiset、map和multimap的底层是由红黑树实现的，比较好奇红黑树的实现方式。</p>
<p>&amp;emsp; &amp;emsp; 在学习的过程中遇到了较大的困难，红黑树是一种较为复杂的数据结构，在学习的过程中。通过不断的阅读别人写的博客，不断分析代码是如何实现的。</p>
<p>&amp;emsp; &amp;emsp; 通过学习红黑树，我更加明白了set和map的实现方法，对set和map有了更加深刻的理解。在学习的过程中，提高了自己阅读他人博客的能力。</p>
<h2 id="四、应用"><a href="#四、应用" class="headerlink" title="四、应用"></a>四、应用</h2><p><img src="/%E7%BA%A2%E9%BB%91%E6%A0%91-1%5Cqus.png" alt="图片"></p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>该题利用的是红黑树不能存放相同的元素。遍历nums数组，将数组元素添加到红黑树中，如果某个添加失败，删除红黑树中的这个元素。最终遍历红黑树，取出元素存放到数组中。具体代码在附录中。</p>
<h3 id="题目地址"><a href="#题目地址" class="headerlink" title="题目地址"></a>题目地址</h3><p><a href="https://leetcode.cn/problems/single-number-iii/">https://leetcode.cn/problems/single-number-iii/</a></p>
<h2 id="五、附录"><a href="#五、附录" class="headerlink" title="五、附录"></a>五、附录</h2><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//源代码</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123; RED, BLACK &#125; ColorType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">RB_TREE</span> &#123;</span><br><span class="line">    <span class="type">int</span> key;</span><br><span class="line">    <span class="keyword">struct</span>  <span class="title class_">RB_TREE</span>* left;</span><br><span class="line">    <span class="keyword">struct</span>  <span class="title class_">RB_TREE</span>* right;</span><br><span class="line">    <span class="keyword">struct</span>  <span class="title class_">RB_TREE</span>* p;</span><br><span class="line">    ColorType color;</span><br><span class="line">&#125;RB_TREE;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">RBT_Root</span> &#123;</span><br><span class="line">    RB_TREE* root;</span><br><span class="line">    RB_TREE* nil;</span><br><span class="line">&#125;RBT_Root;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RBT</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    RBT_Root* T;</span><br><span class="line">    <span class="function">RB_TREE* <span class="title">rbt_findMin</span><span class="params">(RBT_Root* T, RB_TREE* t)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">RB_Insert_Fixup</span><span class="params">(RBT_Root* T, RB_TREE* x)</span></span>;</span><br><span class="line">    <span class="comment">//插入操作分为 3 步：1、将红黑树当二叉查找树，找到其插入位置；2、初始化插入结点，将新结点的颜色设为红色；3、通过调用调整函数，将二叉查找树重新改为红黑树</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rbTree_insert</span><span class="params">(RBT_Root** T, <span class="type">int</span> k)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rbTree_transplant</span><span class="params">(RBT_Root* T, RB_TREE* u, RB_TREE* v)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">RB_Delete_Fixup</span><span class="params">(RBT_Root** T, RB_TREE* x)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rbTree_delete</span><span class="params">(RBT_Root** T, <span class="type">int</span> k)</span></span>;</span><br><span class="line">    <span class="comment">//T表示为树根，x 表示需要进行左旋的子树的根结点</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rbTree_left_rotate</span><span class="params">(RBT_Root* T, RB_TREE* x)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rbTree_right_rotate</span><span class="params">(RBT_Root* T, RB_TREE* x)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rbTree_prePrint</span><span class="params">(RBT_Root* T, RB_TREE* t)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rbTree_inPrint</span><span class="params">(RBT_Root* T, RB_TREE* t)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rbTree_postPrint</span><span class="params">(RBT_Root* T, RB_TREE* t)</span></span>;</span><br><span class="line">    <span class="comment">//输出红黑树的前序遍历和中序遍历的结果</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rbTree_print</span><span class="params">(RBT_Root* T)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rbTree_search</span><span class="params">(RBT_Root* T, <span class="type">int</span> key)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">GetNodeCount</span><span class="params">(RBT_Root* T, RB_TREE* t)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">GetTreeDepth</span><span class="params">(RBT_Root* T, RB_TREE* t)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//红黑树的初始化</span></span><br><span class="line">    <span class="built_in">RBT</span>();</span><br><span class="line">    <span class="comment">//求红黑树的深度</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">depth</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//求红黑树元素的个数</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//红黑树增加元素</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> key)</span></span>;</span><br><span class="line">    <span class="comment">//红黑树前序遍历</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pt</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//红黑树的中序遍历</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">it</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//红黑树的后序遍历</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pot</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//红黑树的查找元素</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">search</span><span class="params">(<span class="type">int</span> key)</span></span>;</span><br><span class="line">    <span class="comment">//红黑树的删除元素</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> key)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line">RBT::<span class="built_in">RBT</span>() &#123;</span><br><span class="line">    T = (RBT_Root*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(RBT_Root));</span><br><span class="line">    T-&gt;nil = (RB_TREE*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(RB_TREE));</span><br><span class="line">    T-&gt;nil-&gt;color = BLACK;</span><br><span class="line">    T-&gt;nil-&gt;left = T-&gt;nil-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">    T-&gt;nil-&gt;p = <span class="literal">NULL</span>;</span><br><span class="line">    T-&gt;root = T-&gt;nil;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">RB_TREE* <span class="title">RBT::rbt_findMin</span><span class="params">(RBT_Root* T, RB_TREE* t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t == T-&gt;nil) &#123;</span><br><span class="line">        <span class="keyword">return</span> T-&gt;nil;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (t-&gt;left != T-&gt;nil) &#123;</span><br><span class="line">        t = t-&gt;left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RBT::RB_Insert_Fixup</span><span class="params">(RBT_Root* T, RB_TREE* x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//首先判断其父结点颜色为红色时才需要调整；为黑色时直接插入即可，不需要调整</span></span><br><span class="line">    <span class="keyword">while</span> (x-&gt;p-&gt;color == RED) &#123;</span><br><span class="line">        <span class="comment">//由于还涉及到其叔叔结点，所以此处需分开讨论，确定父结点是祖父结点的左孩子还是右孩子</span></span><br><span class="line">        <span class="keyword">if</span> (x-&gt;p == x-&gt;p-&gt;p-&gt;left) &#123;</span><br><span class="line">            RB_TREE* y = x-&gt;p-&gt;p-&gt;right;<span class="comment">//找到其叔叔结点</span></span><br><span class="line">            <span class="comment">//如果叔叔结点颜色为红色，此为第 1 种情况，处理方法为：父结点颜色改为黑色；叔叔结点颜色改为黑色；祖父结点颜色改为红色，将祖父结点赋值为当前结点，继续判断；</span></span><br><span class="line">            <span class="keyword">if</span> (y-&gt;color == RED) &#123;</span><br><span class="line">                x-&gt;p-&gt;color = BLACK;</span><br><span class="line">                y-&gt;color = BLACK;</span><br><span class="line">                x-&gt;p-&gt;p-&gt;color = RED;</span><br><span class="line">                x = x-&gt;p-&gt;p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//反之，如果叔叔结点颜色为黑色，此处需分为两种情况：1、当前结点时父结点的右孩子；2、当前结点是父结点的左孩子</span></span><br><span class="line">                <span class="keyword">if</span> (x == x-&gt;p-&gt;right) &#123;</span><br><span class="line">                    <span class="comment">//第 2 种情况：当前结点时父结点的右孩子。解决方案：将父结点作为当前结点做左旋操作。</span></span><br><span class="line">                    x = x-&gt;p;</span><br><span class="line">                    <span class="built_in">rbTree_left_rotate</span>(T, x);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//第 3 种情况：当前结点是父结点的左孩子。解决方案：将父结点颜色改为黑色，祖父结点颜色改为红色，从祖父结点处进行右旋处理。</span></span><br><span class="line">                    x-&gt;p-&gt;color = BLACK;</span><br><span class="line">                    x-&gt;p-&gt;p-&gt;color = RED;</span><br><span class="line">                    <span class="built_in">rbTree_right_rotate</span>(T, x-&gt;p-&gt;p);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;<span class="comment">//如果父结点时祖父结点的右孩子，换汤不换药，只需将以上代码部分中的left改为right即可，道理是一样的。</span></span><br><span class="line">            RB_TREE* y = x-&gt;p-&gt;p-&gt;left;</span><br><span class="line">            <span class="keyword">if</span> (y-&gt;color == RED) &#123;</span><br><span class="line">                x-&gt;p-&gt;color = BLACK;</span><br><span class="line">                y-&gt;color = BLACK;</span><br><span class="line">                x-&gt;p-&gt;p-&gt;color = RED;</span><br><span class="line">                x = x-&gt;p-&gt;p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (x == x-&gt;p-&gt;left) &#123;</span><br><span class="line">                    x = x-&gt;p;</span><br><span class="line">                    <span class="built_in">rbTree_right_rotate</span>(T, x);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    x-&gt;p-&gt;color = BLACK;</span><br><span class="line">                    x-&gt;p-&gt;p-&gt;color = RED;</span><br><span class="line">                    <span class="built_in">rbTree_left_rotate</span>(T, x-&gt;p-&gt;p);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    T-&gt;root-&gt;color = BLACK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入操作分为 3 步：1、将红黑树当二叉查找树，找到其插入位置；2、初始化插入结点，将新结点的颜色设为红色；3、通过调用调整函数，将二叉查找树重新改为红黑树</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RBT::rbTree_insert</span><span class="params">(RBT_Root** T, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1、找到其要插入的位置。解决思路为：从树的根结点开始，通过不断的同新结点的值进行比较，最终找到插入位置</span></span><br><span class="line">    RB_TREE* x, * p;</span><br><span class="line">    x = (*T)-&gt;root;</span><br><span class="line">    p = x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (x != (*T)-&gt;nil) &#123;</span><br><span class="line">        p = x;</span><br><span class="line">        <span class="keyword">if</span> (k &lt; x-&gt;key) &#123;</span><br><span class="line">            x = x-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (k &gt; x-&gt;key) &#123;</span><br><span class="line">            x = x-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n%d已存在\n&quot;</span>, k);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化结点，将新结点的颜色设为红色</span></span><br><span class="line">    x = (RB_TREE*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(RB_TREE));</span><br><span class="line">    x-&gt;key = k;</span><br><span class="line">    x-&gt;color = RED;</span><br><span class="line">    x-&gt;left = x-&gt;right = (*T)-&gt;nil;</span><br><span class="line">    x-&gt;p = p;</span><br><span class="line">    <span class="comment">//对新插入的结点，建立与其父结点之间的联系</span></span><br><span class="line">    <span class="keyword">if</span> ((*T)-&gt;root == (*T)-&gt;nil) &#123;</span><br><span class="line">        (*T)-&gt;root = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (k &lt; p-&gt;key) &#123;</span><br><span class="line">        p-&gt;left = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        p-&gt;right = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3、对二叉查找树进行调整</span></span><br><span class="line">    <span class="built_in">RB_Insert_Fixup</span>((*T), x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RBT::rbTree_transplant</span><span class="params">(RBT_Root* T, RB_TREE* u, RB_TREE* v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u-&gt;p == T-&gt;nil) &#123;</span><br><span class="line">        T-&gt;root = v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (u == u-&gt;p-&gt;left) &#123;</span><br><span class="line">        u-&gt;p-&gt;left = v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        u-&gt;p-&gt;right = v;</span><br><span class="line">    &#125;</span><br><span class="line">    v-&gt;p = u-&gt;p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RBT::RB_Delete_Fixup</span><span class="params">(RBT_Root** T, RB_TREE* x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (x != (*T)-&gt;root &amp;&amp; x-&gt;color == BLACK) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x == x-&gt;p-&gt;left) &#123;</span><br><span class="line">            RB_TREE* w = x-&gt;p-&gt;right;</span><br><span class="line">            <span class="comment">//第 1 种情况：兄弟结点是红色的</span></span><br><span class="line">            <span class="keyword">if</span> (RED == w-&gt;color) &#123;</span><br><span class="line">                w-&gt;color = BLACK;</span><br><span class="line">                w-&gt;p-&gt;color = RED;</span><br><span class="line">                <span class="built_in">rbTree_left_rotate</span>((*T), x-&gt;p);</span><br><span class="line">                w = x-&gt;p-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//第2种情况：兄弟是黑色的，并且兄弟的两个儿子都是黑色的。</span></span><br><span class="line">            <span class="keyword">if</span> (w-&gt;left-&gt;color == BLACK &amp;&amp; w-&gt;right-&gt;color == BLACK) &#123;</span><br><span class="line">                w-&gt;color = RED;</span><br><span class="line">                x = x-&gt;p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//第3种情况</span></span><br><span class="line">            <span class="keyword">if</span> (w-&gt;left-&gt;color == RED &amp;&amp; w-&gt;right-&gt;color == BLACK) &#123;</span><br><span class="line">                w-&gt;left-&gt;color = BLACK;</span><br><span class="line">                w-&gt;color = RED;</span><br><span class="line">                <span class="built_in">rbTree_right_rotate</span>((*T), w);</span><br><span class="line">                w = x-&gt;p-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//第4种情况</span></span><br><span class="line">            <span class="keyword">if</span> (w-&gt;right-&gt;color == RED) &#123;</span><br><span class="line">                w-&gt;color = x-&gt;p-&gt;color;</span><br><span class="line">                x-&gt;p-&gt;color = BLACK;</span><br><span class="line">                w-&gt;right-&gt;color = BLACK;</span><br><span class="line">                <span class="built_in">rbTree_left_rotate</span>((*T), x-&gt;p);</span><br><span class="line">                x = (*T)-&gt;root;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            RB_TREE* w = x-&gt;p-&gt;left;</span><br><span class="line">            <span class="comment">//第 1 种情况</span></span><br><span class="line">            <span class="keyword">if</span> (w-&gt;color == RED) &#123;</span><br><span class="line">                w-&gt;color = BLACK;</span><br><span class="line">                x-&gt;p-&gt;color = RED;</span><br><span class="line">                <span class="built_in">rbTree_right_rotate</span>((*T), x-&gt;p);</span><br><span class="line">                w = x-&gt;p-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//第 2 种情况</span></span><br><span class="line">            <span class="keyword">if</span> (w-&gt;left-&gt;color == BLACK &amp;&amp; w-&gt;right-&gt;color == BLACK) &#123;</span><br><span class="line">                w-&gt;color = RED;</span><br><span class="line">                x = x-&gt;p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//第 3 种情况</span></span><br><span class="line">            <span class="keyword">if</span> (w-&gt;left-&gt;color == BLACK &amp;&amp; w-&gt;right-&gt;color == RED) &#123;</span><br><span class="line">                w-&gt;color = RED;</span><br><span class="line">                w-&gt;right-&gt;color = BLACK;</span><br><span class="line">                w = x-&gt;p-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//第 4 种情况</span></span><br><span class="line">            <span class="keyword">if</span> (w-&gt;right-&gt;color == BLACK) &#123;</span><br><span class="line">                w-&gt;color = w-&gt;p-&gt;color;</span><br><span class="line">                x-&gt;p-&gt;color = BLACK;</span><br><span class="line">                w-&gt;left-&gt;color = BLACK;</span><br><span class="line">                <span class="built_in">rbTree_right_rotate</span>((*T), x-&gt;p);</span><br><span class="line">                x = (*T)-&gt;root;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    x-&gt;color = BLACK;<span class="comment">//最终将根结点的颜色设为黑色</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RBT::rbTree_delete</span><span class="params">(RBT_Root** T, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == (*T)-&gt;root) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//找到要被删除的结点</span></span><br><span class="line">    RB_TREE* toDelete = (*T)-&gt;root;</span><br><span class="line">    RB_TREE* x = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//找到值为k的结点</span></span><br><span class="line">    <span class="keyword">while</span> (toDelete != (*T)-&gt;nil &amp;&amp; toDelete-&gt;key != k) &#123;</span><br><span class="line">        <span class="keyword">if</span> (k &lt; toDelete-&gt;key) &#123;</span><br><span class="line">            toDelete = toDelete-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (k &gt; toDelete-&gt;key) &#123;</span><br><span class="line">            toDelete = toDelete-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (toDelete == (*T)-&gt;nil) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n%d 不存在\n&quot;</span>, k);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果两个孩子，就找到右子树中最小的结点，将之代替，然后直接删除该结点即可</span></span><br><span class="line">    <span class="keyword">if</span> (toDelete-&gt;left != (*T)-&gt;nil &amp;&amp; toDelete-&gt;right != (*T)-&gt;nil) &#123;</span><br><span class="line">        RB_TREE* alternative = <span class="built_in">rbt_findMin</span>((*T), toDelete-&gt;right);</span><br><span class="line">        k = toDelete-&gt;key = alternative-&gt;key;<span class="comment">//这里只对值进行复制，并不复制颜色，以免破坏红黑树的性质</span></span><br><span class="line">        toDelete = alternative;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果只有一个孩子结点（只有左孩子或只有右孩子），直接用孩子结点顶替该结点位置即可（没有孩子结点的也走此判断语句）。</span></span><br><span class="line">    <span class="keyword">if</span> (toDelete-&gt;left == (*T)-&gt;nil) &#123;</span><br><span class="line">        x = toDelete-&gt;right;</span><br><span class="line">        <span class="built_in">rbTree_transplant</span>((*T), toDelete, toDelete-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (toDelete-&gt;right == (*T)-&gt;nil) &#123;</span><br><span class="line">        x = toDelete-&gt;left;</span><br><span class="line">        <span class="built_in">rbTree_transplant</span>((*T), toDelete, toDelete-&gt;left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在删除该结点之前，需判断此结点的颜色：如果是红色，直接删除，不会破坏红黑树；若是黑色，删除后会破坏红黑树的第 5 条性质，需要对树做调整。</span></span><br><span class="line">    <span class="keyword">if</span> (toDelete-&gt;color == BLACK) &#123;</span><br><span class="line">        <span class="built_in">RB_Delete_Fixup</span>(T, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最终可以彻底删除要删除的结点，释放其占用的空间</span></span><br><span class="line">    <span class="built_in">free</span>(toDelete);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//T表示为树根，x 表示需要进行左旋的子树的根结点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RBT::rbTree_left_rotate</span><span class="params">(RBT_Root* T, RB_TREE* x)</span> </span>&#123;</span><br><span class="line">    RB_TREE* y = x-&gt;right;<span class="comment">//找到根结点的右子树</span></span><br><span class="line"></span><br><span class="line">    x-&gt;right = y-&gt;left;<span class="comment">//将右子树的左孩子移动至结点 x 的右孩子处</span></span><br><span class="line">    <span class="keyword">if</span> (x-&gt;right != T-&gt;nil) &#123;<span class="comment">//如果 x 的右子树不是nil，需重新连接 右子树的双亲结点为 x</span></span><br><span class="line">        x-&gt;right-&gt;p = x;</span><br><span class="line">    &#125;</span><br><span class="line">    y-&gt;p = x-&gt;p;<span class="comment">//设置 y 的双亲结点为 x 的双亲结点</span></span><br><span class="line">    <span class="comment">//重新设置 y 的双亲结点同 y 的连接，分为 2 种情况：1、原 x 结点本身就是整棵树的数根结点，此时只需要将 T 指针指向 y；2、根据 y 中关键字同其父结点关键字的值的大小，判断 y 是父结点的左孩子还是右孩子</span></span><br><span class="line">    <span class="keyword">if</span> (y-&gt;p == T-&gt;nil) &#123;</span><br><span class="line">        T-&gt;root = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (y-&gt;key &lt; y-&gt;p-&gt;key) &#123;</span><br><span class="line">        y-&gt;p-&gt;left = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        y-&gt;p-&gt;right = y;</span><br><span class="line">    &#125;</span><br><span class="line">    y-&gt;left = x;<span class="comment">//将 x 连接给 y 结点的左孩子处</span></span><br><span class="line">    x-&gt;p = y;<span class="comment">//设置 x 的双亲结点为 y。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RBT::rbTree_right_rotate</span><span class="params">(RBT_Root* T, RB_TREE* x)</span> </span>&#123;</span><br><span class="line">    RB_TREE* y = x-&gt;left;</span><br><span class="line">    x-&gt;left = y-&gt;right;</span><br><span class="line">    <span class="keyword">if</span> (T-&gt;nil != x-&gt;left) &#123;</span><br><span class="line">        x-&gt;left-&gt;p = x;</span><br><span class="line">    &#125;</span><br><span class="line">    y-&gt;p = x-&gt;p;</span><br><span class="line">    <span class="keyword">if</span> (y-&gt;p == T-&gt;nil) &#123;</span><br><span class="line">        T-&gt;root = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (y-&gt;key &lt; y-&gt;p-&gt;key) &#123;</span><br><span class="line">        y-&gt;p-&gt;left = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        y-&gt;p-&gt;right = y;</span><br><span class="line">    &#125;</span><br><span class="line">    y-&gt;right = x;</span><br><span class="line">    x-&gt;p = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RBT::rbTree_prePrint</span><span class="params">(RBT_Root* T, RB_TREE* t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T-&gt;nil == t) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (t-&gt;color == RED) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%dR &quot;</span>, t-&gt;key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%dB &quot;</span>, t-&gt;key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">rbTree_prePrint</span>(T, t-&gt;left);</span><br><span class="line">    <span class="built_in">rbTree_prePrint</span>(T, t-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RBT::rbTree_inPrint</span><span class="params">(RBT_Root* T, RB_TREE* t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T-&gt;nil == t) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">rbTree_inPrint</span>(T, t-&gt;left);</span><br><span class="line">    <span class="keyword">if</span> (t-&gt;color == RED) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%dR &quot;</span>, t-&gt;key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%dB &quot;</span>, t-&gt;key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">rbTree_inPrint</span>(T, t-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RBT::rbTree_postPrint</span><span class="params">(RBT_Root* T, RB_TREE* t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T-&gt;nil == t) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">rbTree_postPrint</span>(T, t-&gt;left);</span><br><span class="line">    <span class="built_in">rbTree_postPrint</span>(T, t-&gt;right);</span><br><span class="line">    <span class="keyword">if</span> (t-&gt;color == RED) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%dR &quot;</span>, t-&gt;key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%dB &quot;</span>, t-&gt;key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出红黑树的前序遍历和中序遍历的结果</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RBT::rbTree_print</span><span class="params">(RBT_Root* T)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;前序遍历 ：&quot;</span>);</span><br><span class="line">    <span class="built_in">rbTree_prePrint</span>(T, T-&gt;root);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;中序遍历 ：&quot;</span>);</span><br><span class="line">    <span class="built_in">rbTree_inPrint</span>(T, T-&gt;root);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RBT::rbTree_search</span><span class="params">(RBT_Root* T, <span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == T-&gt;root) &#123;</span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    RB_TREE* p = T-&gt;root;<span class="comment">//p为查到的结点 </span></span><br><span class="line">    <span class="keyword">while</span> (p != T-&gt;nil &amp;&amp; p-&gt;key != key) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key &lt; p-&gt;key) &#123;</span><br><span class="line">            p = p-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            p = p-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p == T-&gt;nil) &#123;</span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;color == RED) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%dR查找成功！&quot;</span>, p-&gt;key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%dB查找成功！&quot;</span>, p-&gt;key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d查找失败！&quot;</span>, key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">RBT::GetNodeCount</span><span class="params">(RBT_Root* T, RB_TREE* t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T-&gt;nil == t) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> LeftNum = <span class="built_in">GetNodeCount</span>(T, t-&gt;left);</span><br><span class="line">    <span class="type">int</span> RightNum = <span class="built_in">GetNodeCount</span>(T, t-&gt;right);</span><br><span class="line">    <span class="type">int</span> ret = LeftNum + RightNum + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">RBT::GetTreeDepth</span><span class="params">(RBT_Root* T, RB_TREE* t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T-&gt;nil == t)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> LeftDepth = <span class="built_in">GetTreeDepth</span>(T, t-&gt;left);</span><br><span class="line">    <span class="type">int</span> RightDepth = <span class="built_in">GetTreeDepth</span>(T, t-&gt;right);</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">max</span>(LeftDepth, RightDepth) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">RBT::depth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">GetTreeDepth</span>(T, T-&gt;root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">RBT::size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">GetNodeCount</span>(T, T-&gt;root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RBT::add</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">rbTree_insert</span>(&amp;T, key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RBT::remove</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">rbTree_delete</span>(&amp;T, key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RBT::pt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">rbTree_prePrint</span>(T, T-&gt;root);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RBT::it</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">rbTree_inPrint</span>(T, T-&gt;root);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RBT::pot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">rbTree_postPrint</span>(T, T-&gt;root);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RBT::search</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">rbTree_search</span>(T, key);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RBT rbt;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;输入你要添加元素的个数：&quot;</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; num;</span><br><span class="line">        rbt.<span class="built_in">add</span>(num);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;红黑树的前序遍历：&quot;</span>;</span><br><span class="line">    rbt.<span class="built_in">pt</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;红黑树的中序遍历：&quot;</span>;</span><br><span class="line">    rbt.<span class="built_in">it</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;红黑树的后序遍历：&quot;</span>;</span><br><span class="line">    rbt.<span class="built_in">pot</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;红黑树元素的个数：&quot;</span> &lt;&lt; rbt.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;红黑树的深度：&quot;</span> &lt;&lt; rbt.<span class="built_in">depth</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;输入你要查找的元素：&quot;</span>;</span><br><span class="line">    cin &gt;&gt; num;</span><br><span class="line">    rbt.<span class="built_in">search</span>(num);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;输入你要删除的元素：&quot;</span>;</span><br><span class="line">    cin &gt;&gt; num;</span><br><span class="line">    rbt.<span class="built_in">remove</span>(num);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;红黑树的前序遍历：&quot;</span>;</span><br><span class="line">    rbt.<span class="built_in">pt</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;红黑树的中序遍历：&quot;</span>;</span><br><span class="line">    rbt.<span class="built_in">it</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;红黑树的后序遍历：&quot;</span>;</span><br><span class="line">    rbt.<span class="built_in">pot</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;红黑树元素的个数：&quot;</span> &lt;&lt; rbt.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;红黑树的深度：&quot;</span> &lt;&lt; rbt.<span class="built_in">depth</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>图一来源自网上。</p>
<h3 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//解题代码</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123; RED, BLACK &#125; ColorType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">RB_TREE</span> &#123;</span><br><span class="line">    <span class="type">int</span> key;</span><br><span class="line">    <span class="keyword">struct</span>  <span class="title class_">RB_TREE</span>* left;</span><br><span class="line">    <span class="keyword">struct</span>  <span class="title class_">RB_TREE</span>* right;</span><br><span class="line">    <span class="keyword">struct</span>  <span class="title class_">RB_TREE</span>* p;</span><br><span class="line">    ColorType color;</span><br><span class="line">&#125;RB_TREE;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">RBT_Root</span> &#123;</span><br><span class="line">    RB_TREE* root;</span><br><span class="line">    RB_TREE* nil;</span><br><span class="line">&#125;RBT_Root;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RBT</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">    RBT_Root* T;</span><br><span class="line">    <span class="function">RB_TREE* <span class="title">rbt_findMin</span><span class="params">(RBT_Root* T, RB_TREE* t)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">RB_Insert_Fixup</span><span class="params">(RBT_Root* T, RB_TREE* x)</span></span>;</span><br><span class="line">    <span class="comment">//插入操作分为 3 步：1、将红黑树当二叉查找树，找到其插入位置；2、初始化插入结点，将新结点的颜色设为红色；3、通过调用调整函数，将二叉查找树重新改为红黑树</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">rbTree_insert</span><span class="params">(RBT_Root** T, <span class="type">int</span> k)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rbTree_transplant</span><span class="params">(RBT_Root* T, RB_TREE* u, RB_TREE* v)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">RB_Delete_Fixup</span><span class="params">(RBT_Root** T, RB_TREE* x)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">rbTree_delete</span><span class="params">(RBT_Root** T, <span class="type">int</span> k)</span></span>;</span><br><span class="line">    <span class="comment">//T表示为树根，x 表示需要进行左旋的子树的根结点</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rbTree_left_rotate</span><span class="params">(RBT_Root* T, RB_TREE* x)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rbTree_right_rotate</span><span class="params">(RBT_Root* T, RB_TREE* x)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rbTree_prePrint</span><span class="params">(RBT_Root* T, RB_TREE* t)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rbTree_inPrint</span><span class="params">(RBT_Root* T, RB_TREE* t)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rbTree_postPrint</span><span class="params">(RBT_Root* T, RB_TREE* t)</span></span>;</span><br><span class="line">    <span class="comment">//输出红黑树的前序遍历和中序遍历的结果</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rbTree_print</span><span class="params">(RBT_Root* T)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rbTree_search</span><span class="params">(RBT_Root* T, <span class="type">int</span> key)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">GetNodeCount</span><span class="params">(RBT_Root* T, RB_TREE* t)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">GetTreeDepth</span><span class="params">(RBT_Root* T, RB_TREE* t)</span></span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">g</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        set&lt;<span class="type">int</span>&gt; c;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = nums.<span class="built_in">begin</span>();it != nums.<span class="built_in">end</span>();it++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c.<span class="built_in">insert</span>(*it).second) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                c.<span class="built_in">erase</span>(*it);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(set&lt;<span class="type">int</span>&gt;::iterator it = c.<span class="built_in">begin</span>();it != c.<span class="built_in">end</span>();it++) &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(*it);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生成一个vector数组</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">getAns</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//getans(T,T-&gt;root);</span></span><br><span class="line">        <span class="built_in">it</span>();</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//红黑树的初始化</span></span><br><span class="line">    <span class="built_in">RBT</span>();</span><br><span class="line">    <span class="comment">//求红黑树的深度</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">depth</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//求红黑树元素的个数</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//红黑树增加元素</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">add</span><span class="params">(<span class="type">int</span> key)</span></span>;</span><br><span class="line">    <span class="comment">//红黑树前序遍历</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pt</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//红黑树的中序遍历</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">it</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//红黑树的后序遍历</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pot</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//红黑树的查找元素</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">search</span><span class="params">(<span class="type">int</span> key)</span></span>;</span><br><span class="line">    <span class="comment">//红黑树的删除元素</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> key)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line">RBT::<span class="built_in">RBT</span>() &#123;</span><br><span class="line">    T = (RBT_Root*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(RBT_Root));</span><br><span class="line">    T-&gt;nil = (RB_TREE*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(RB_TREE));</span><br><span class="line">    T-&gt;nil-&gt;color = BLACK;</span><br><span class="line">    T-&gt;nil-&gt;left = T-&gt;nil-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">    T-&gt;nil-&gt;p = <span class="literal">NULL</span>;</span><br><span class="line">    T-&gt;root = T-&gt;nil;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">RB_TREE* <span class="title">RBT::rbt_findMin</span><span class="params">(RBT_Root* T, RB_TREE* t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t == T-&gt;nil) &#123;</span><br><span class="line">        <span class="keyword">return</span> T-&gt;nil;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (t-&gt;left != T-&gt;nil) &#123;</span><br><span class="line">        t = t-&gt;left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RBT::RB_Insert_Fixup</span><span class="params">(RBT_Root* T, RB_TREE* x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//首先判断其父结点颜色为红色时才需要调整；为黑色时直接插入即可，不需要调整</span></span><br><span class="line">    <span class="keyword">while</span> (x-&gt;p-&gt;color == RED) &#123;</span><br><span class="line">        <span class="comment">//由于还涉及到其叔叔结点，所以此处需分开讨论，确定父结点是祖父结点的左孩子还是右孩子</span></span><br><span class="line">        <span class="keyword">if</span> (x-&gt;p == x-&gt;p-&gt;p-&gt;left) &#123;</span><br><span class="line">            RB_TREE* y = x-&gt;p-&gt;p-&gt;right;<span class="comment">//找到其叔叔结点</span></span><br><span class="line">            <span class="comment">//如果叔叔结点颜色为红色，此为第 1 种情况，处理方法为：父结点颜色改为黑色；叔叔结点颜色改为黑色；祖父结点颜色改为红色，将祖父结点赋值为当前结点，继续判断；</span></span><br><span class="line">            <span class="keyword">if</span> (y-&gt;color == RED) &#123;</span><br><span class="line">                x-&gt;p-&gt;color = BLACK;</span><br><span class="line">                y-&gt;color = BLACK;</span><br><span class="line">                x-&gt;p-&gt;p-&gt;color = RED;</span><br><span class="line">                x = x-&gt;p-&gt;p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//反之，如果叔叔结点颜色为黑色，此处需分为两种情况：1、当前结点时父结点的右孩子；2、当前结点是父结点的左孩子</span></span><br><span class="line">                <span class="keyword">if</span> (x == x-&gt;p-&gt;right) &#123;</span><br><span class="line">                    <span class="comment">//第 2 种情况：当前结点时父结点的右孩子。解决方案：将父结点作为当前结点做左旋操作。</span></span><br><span class="line">                    x = x-&gt;p;</span><br><span class="line">                    <span class="built_in">rbTree_left_rotate</span>(T, x);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//第 3 种情况：当前结点是父结点的左孩子。解决方案：将父结点颜色改为黑色，祖父结点颜色改为红色，从祖父结点处进行右旋处理。</span></span><br><span class="line">                    x-&gt;p-&gt;color = BLACK;</span><br><span class="line">                    x-&gt;p-&gt;p-&gt;color = RED;</span><br><span class="line">                    <span class="built_in">rbTree_right_rotate</span>(T, x-&gt;p-&gt;p);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;<span class="comment">//如果父结点时祖父结点的右孩子，换汤不换药，只需将以上代码部分中的left改为right即可，道理是一样的。</span></span><br><span class="line">            RB_TREE* y = x-&gt;p-&gt;p-&gt;left;</span><br><span class="line">            <span class="keyword">if</span> (y-&gt;color == RED) &#123;</span><br><span class="line">                x-&gt;p-&gt;color = BLACK;</span><br><span class="line">                y-&gt;color = BLACK;</span><br><span class="line">                x-&gt;p-&gt;p-&gt;color = RED;</span><br><span class="line">                x = x-&gt;p-&gt;p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (x == x-&gt;p-&gt;left) &#123;</span><br><span class="line">                    x = x-&gt;p;</span><br><span class="line">                    <span class="built_in">rbTree_right_rotate</span>(T, x);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    x-&gt;p-&gt;color = BLACK;</span><br><span class="line">                    x-&gt;p-&gt;p-&gt;color = RED;</span><br><span class="line">                    <span class="built_in">rbTree_left_rotate</span>(T, x-&gt;p-&gt;p);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    T-&gt;root-&gt;color = BLACK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入操作分为 3 步：1、将红黑树当二叉查找树，找到其插入位置；2、初始化插入结点，将新结点的颜色设为红色；3、通过调用调整函数，将二叉查找树重新改为红黑树</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">RBT::rbTree_insert</span><span class="params">(RBT_Root** T, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1、找到其要插入的位置。解决思路为：从树的根结点开始，通过不断的同新结点的值进行比较，最终找到插入位置</span></span><br><span class="line">    RB_TREE* x, * p;</span><br><span class="line">    x = (*T)-&gt;root;</span><br><span class="line">    p = x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (x != (*T)-&gt;nil) &#123;</span><br><span class="line">        p = x;</span><br><span class="line">        <span class="keyword">if</span> (k &lt; x-&gt;key) &#123;</span><br><span class="line">            x = x-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (k &gt; x-&gt;key) &#123;</span><br><span class="line">            x = x-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//printf(&quot;\n%d已存在\n&quot;, k);</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化结点，将新结点的颜色设为红色</span></span><br><span class="line">    x = (RB_TREE*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(RB_TREE));</span><br><span class="line">    x-&gt;key = k;</span><br><span class="line">    x-&gt;color = RED;</span><br><span class="line">    x-&gt;left = x-&gt;right = (*T)-&gt;nil;</span><br><span class="line">    x-&gt;p = p;</span><br><span class="line">    <span class="comment">//对新插入的结点，建立与其父结点之间的联系</span></span><br><span class="line">    <span class="keyword">if</span> ((*T)-&gt;root == (*T)-&gt;nil) &#123;</span><br><span class="line">        (*T)-&gt;root = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (k &lt; p-&gt;key) &#123;</span><br><span class="line">        p-&gt;left = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        p-&gt;right = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3、对二叉查找树进行调整</span></span><br><span class="line">    <span class="built_in">RB_Insert_Fixup</span>((*T), x);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RBT::rbTree_transplant</span><span class="params">(RBT_Root* T, RB_TREE* u, RB_TREE* v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u-&gt;p == T-&gt;nil) &#123;</span><br><span class="line">        T-&gt;root = v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (u == u-&gt;p-&gt;left) &#123;</span><br><span class="line">        u-&gt;p-&gt;left = v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        u-&gt;p-&gt;right = v;</span><br><span class="line">    &#125;</span><br><span class="line">    v-&gt;p = u-&gt;p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RBT::RB_Delete_Fixup</span><span class="params">(RBT_Root** T, RB_TREE* x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (x != (*T)-&gt;root &amp;&amp; x-&gt;color == BLACK) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x == x-&gt;p-&gt;left) &#123;</span><br><span class="line">            RB_TREE* w = x-&gt;p-&gt;right;</span><br><span class="line">            <span class="comment">//第 1 种情况：兄弟结点是红色的</span></span><br><span class="line">            <span class="keyword">if</span> (RED == w-&gt;color) &#123;</span><br><span class="line">                w-&gt;color = BLACK;</span><br><span class="line">                w-&gt;p-&gt;color = RED;</span><br><span class="line">                <span class="built_in">rbTree_left_rotate</span>((*T), x-&gt;p);</span><br><span class="line">                w = x-&gt;p-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//第2种情况：兄弟是黑色的，并且兄弟的两个儿子都是黑色的。</span></span><br><span class="line">            <span class="keyword">if</span> (w-&gt;left-&gt;color == BLACK &amp;&amp; w-&gt;right-&gt;color == BLACK) &#123;</span><br><span class="line">                w-&gt;color = RED;</span><br><span class="line">                x = x-&gt;p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//第3种情况</span></span><br><span class="line">            <span class="keyword">if</span> (w-&gt;left-&gt;color == RED &amp;&amp; w-&gt;right-&gt;color == BLACK) &#123;</span><br><span class="line">                w-&gt;left-&gt;color = BLACK;</span><br><span class="line">                w-&gt;color = RED;</span><br><span class="line">                <span class="built_in">rbTree_right_rotate</span>((*T), w);</span><br><span class="line">                w = x-&gt;p-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//第4种情况</span></span><br><span class="line">            <span class="keyword">if</span> (w-&gt;right-&gt;color == RED) &#123;</span><br><span class="line">                w-&gt;color = x-&gt;p-&gt;color;</span><br><span class="line">                x-&gt;p-&gt;color = BLACK;</span><br><span class="line">                w-&gt;right-&gt;color = BLACK;</span><br><span class="line">                <span class="built_in">rbTree_left_rotate</span>((*T), x-&gt;p);</span><br><span class="line">                x = (*T)-&gt;root;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            RB_TREE* w = x-&gt;p-&gt;left;</span><br><span class="line">            <span class="comment">//第 1 种情况</span></span><br><span class="line">            <span class="keyword">if</span> (w-&gt;color == RED) &#123;</span><br><span class="line">                w-&gt;color = BLACK;</span><br><span class="line">                x-&gt;p-&gt;color = RED;</span><br><span class="line">                <span class="built_in">rbTree_right_rotate</span>((*T), x-&gt;p);</span><br><span class="line">                w = x-&gt;p-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//第 2 种情况</span></span><br><span class="line">            <span class="keyword">if</span> (w-&gt;left-&gt;color == BLACK &amp;&amp; w-&gt;right-&gt;color == BLACK) &#123;</span><br><span class="line">                w-&gt;color = RED;</span><br><span class="line">                x = x-&gt;p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//第 3 种情况</span></span><br><span class="line">            <span class="keyword">if</span> (w-&gt;left-&gt;color == BLACK &amp;&amp; w-&gt;right-&gt;color == RED) &#123;</span><br><span class="line">                w-&gt;color = RED;</span><br><span class="line">                w-&gt;right-&gt;color = BLACK;</span><br><span class="line">                w = x-&gt;p-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//第 4 种情况</span></span><br><span class="line">            <span class="keyword">if</span> (w-&gt;right-&gt;color == BLACK) &#123;</span><br><span class="line">                w-&gt;color = w-&gt;p-&gt;color;</span><br><span class="line">                x-&gt;p-&gt;color = BLACK;</span><br><span class="line">                w-&gt;left-&gt;color = BLACK;</span><br><span class="line">                <span class="built_in">rbTree_right_rotate</span>((*T), x-&gt;p);</span><br><span class="line">                x = (*T)-&gt;root;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    x-&gt;color = BLACK;<span class="comment">//最终将根结点的颜色设为黑色</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">RBT::rbTree_delete</span><span class="params">(RBT_Root** T, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == (*T)-&gt;root) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//找到要被删除的结点</span></span><br><span class="line">    RB_TREE* toDelete = (*T)-&gt;root;</span><br><span class="line">    RB_TREE* x = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//找到值为k的结点</span></span><br><span class="line">    <span class="keyword">while</span> (toDelete != (*T)-&gt;nil &amp;&amp; toDelete-&gt;key != k) &#123;</span><br><span class="line">        <span class="keyword">if</span> (k &lt; toDelete-&gt;key) &#123;</span><br><span class="line">            toDelete = toDelete-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (k &gt; toDelete-&gt;key) &#123;</span><br><span class="line">            toDelete = toDelete-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (toDelete == (*T)-&gt;nil) &#123;</span><br><span class="line">        <span class="comment">//printf(&quot;\n%d 不存在\n&quot;, k);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果两个孩子，就找到右子树中最小的结点，将之代替，然后直接删除该结点即可</span></span><br><span class="line">    <span class="keyword">if</span> (toDelete-&gt;left != (*T)-&gt;nil &amp;&amp; toDelete-&gt;right != (*T)-&gt;nil) &#123;</span><br><span class="line">        RB_TREE* alternative = <span class="built_in">rbt_findMin</span>((*T), toDelete-&gt;right);</span><br><span class="line">        k = toDelete-&gt;key = alternative-&gt;key;<span class="comment">//这里只对值进行复制，并不复制颜色，以免破坏红黑树的性质</span></span><br><span class="line">        toDelete = alternative;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果只有一个孩子结点（只有左孩子或只有右孩子），直接用孩子结点顶替该结点位置即可（没有孩子结点的也走此判断语句）。</span></span><br><span class="line">    <span class="keyword">if</span> (toDelete-&gt;left == (*T)-&gt;nil) &#123;</span><br><span class="line">        x = toDelete-&gt;right;</span><br><span class="line">        <span class="built_in">rbTree_transplant</span>((*T), toDelete, toDelete-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (toDelete-&gt;right == (*T)-&gt;nil) &#123;</span><br><span class="line">        x = toDelete-&gt;left;</span><br><span class="line">        <span class="built_in">rbTree_transplant</span>((*T), toDelete, toDelete-&gt;left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在删除该结点之前，需判断此结点的颜色：如果是红色，直接删除，不会破坏红黑树；若是黑色，删除后会破坏红黑树的第 5 条性质，需要对树做调整。</span></span><br><span class="line">    <span class="keyword">if</span> (toDelete-&gt;color == BLACK) &#123;</span><br><span class="line">        <span class="built_in">RB_Delete_Fixup</span>(T, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最终可以彻底删除要删除的结点，释放其占用的空间</span></span><br><span class="line">    <span class="built_in">free</span>(toDelete);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//T表示为树根，x 表示需要进行左旋的子树的根结点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RBT::rbTree_left_rotate</span><span class="params">(RBT_Root* T, RB_TREE* x)</span> </span>&#123;</span><br><span class="line">    RB_TREE* y = x-&gt;right;<span class="comment">//找到根结点的右子树</span></span><br><span class="line"></span><br><span class="line">    x-&gt;right = y-&gt;left;<span class="comment">//将右子树的左孩子移动至结点 x 的右孩子处</span></span><br><span class="line">    <span class="keyword">if</span> (x-&gt;right != T-&gt;nil) &#123;<span class="comment">//如果 x 的右子树不是nil，需重新连接 右子树的双亲结点为 x</span></span><br><span class="line">        x-&gt;right-&gt;p = x;</span><br><span class="line">    &#125;</span><br><span class="line">    y-&gt;p = x-&gt;p;<span class="comment">//设置 y 的双亲结点为 x 的双亲结点</span></span><br><span class="line">    <span class="comment">//重新设置 y 的双亲结点同 y 的连接，分为 2 种情况：1、原 x 结点本身就是整棵树的数根结点，此时只需要将 T 指针指向 y；2、根据 y 中关键字同其父结点关键字的值的大小，判断 y 是父结点的左孩子还是右孩子</span></span><br><span class="line">    <span class="keyword">if</span> (y-&gt;p == T-&gt;nil) &#123;</span><br><span class="line">        T-&gt;root = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (y-&gt;key &lt; y-&gt;p-&gt;key) &#123;</span><br><span class="line">        y-&gt;p-&gt;left = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        y-&gt;p-&gt;right = y;</span><br><span class="line">    &#125;</span><br><span class="line">    y-&gt;left = x;<span class="comment">//将 x 连接给 y 结点的左孩子处</span></span><br><span class="line">    x-&gt;p = y;<span class="comment">//设置 x 的双亲结点为 y。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RBT::rbTree_right_rotate</span><span class="params">(RBT_Root* T, RB_TREE* x)</span> </span>&#123;</span><br><span class="line">    RB_TREE* y = x-&gt;left;</span><br><span class="line">    x-&gt;left = y-&gt;right;</span><br><span class="line">    <span class="keyword">if</span> (T-&gt;nil != x-&gt;left) &#123;</span><br><span class="line">        x-&gt;left-&gt;p = x;</span><br><span class="line">    &#125;</span><br><span class="line">    y-&gt;p = x-&gt;p;</span><br><span class="line">    <span class="keyword">if</span> (y-&gt;p == T-&gt;nil) &#123;</span><br><span class="line">        T-&gt;root = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (y-&gt;key &lt; y-&gt;p-&gt;key) &#123;</span><br><span class="line">        y-&gt;p-&gt;left = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        y-&gt;p-&gt;right = y;</span><br><span class="line">    &#125;</span><br><span class="line">    y-&gt;right = x;</span><br><span class="line">    x-&gt;p = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RBT::rbTree_prePrint</span><span class="params">(RBT_Root* T, RB_TREE* t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T-&gt;nil == t) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (t-&gt;color == RED) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%dR &quot;</span>, t-&gt;key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%dB &quot;</span>, t-&gt;key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">rbTree_prePrint</span>(T, t-&gt;left);</span><br><span class="line">    <span class="built_in">rbTree_prePrint</span>(T, t-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RBT::rbTree_inPrint</span><span class="params">(RBT_Root* T, RB_TREE* t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T-&gt;nil == t) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">rbTree_inPrint</span>(T, t-&gt;left);</span><br><span class="line">    <span class="comment">//if (t-&gt;color == RED) &#123;</span></span><br><span class="line">        <span class="comment">//printf(&quot;%dR &quot;, t-&gt;key);</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="comment">//else &#123;</span></span><br><span class="line">        <span class="comment">//printf(&quot;%dB &quot;, t-&gt;key);</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    ans.<span class="built_in">push_back</span>(t-&gt;key);</span><br><span class="line">    <span class="built_in">rbTree_inPrint</span>(T, t-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RBT::rbTree_postPrint</span><span class="params">(RBT_Root* T, RB_TREE* t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T-&gt;nil == t) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">rbTree_postPrint</span>(T, t-&gt;left);</span><br><span class="line">    <span class="built_in">rbTree_postPrint</span>(T, t-&gt;right);</span><br><span class="line">    <span class="keyword">if</span> (t-&gt;color == RED) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%dR &quot;</span>, t-&gt;key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%dB &quot;</span>, t-&gt;key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出红黑树的前序遍历和中序遍历的结果</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RBT::rbTree_print</span><span class="params">(RBT_Root* T)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;前序遍历 ：&quot;</span>);</span><br><span class="line">    <span class="built_in">rbTree_prePrint</span>(T, T-&gt;root);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;中序遍历 ：&quot;</span>);</span><br><span class="line">    <span class="built_in">rbTree_inPrint</span>(T, T-&gt;root);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RBT::rbTree_search</span><span class="params">(RBT_Root* T, <span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == T-&gt;root) &#123;</span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    RB_TREE* p = T-&gt;root;<span class="comment">//p为查到的结点 </span></span><br><span class="line">    <span class="keyword">while</span> (p != T-&gt;nil &amp;&amp; p-&gt;key != key) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key &lt; p-&gt;key) &#123;</span><br><span class="line">            p = p-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            p = p-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p == T-&gt;nil) &#123;</span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;color == RED) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%dR查找成功！&quot;</span>, p-&gt;key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%dB查找成功！&quot;</span>, p-&gt;key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d查找失败！&quot;</span>, key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">RBT::GetNodeCount</span><span class="params">(RBT_Root* T, RB_TREE* t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T-&gt;nil == t) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> LeftNum = <span class="built_in">GetNodeCount</span>(T, t-&gt;left);</span><br><span class="line">    <span class="type">int</span> RightNum = <span class="built_in">GetNodeCount</span>(T, t-&gt;right);</span><br><span class="line">    <span class="type">int</span> ret = LeftNum + RightNum + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">RBT::GetTreeDepth</span><span class="params">(RBT_Root* T, RB_TREE* t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T-&gt;nil == t)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> LeftDepth = <span class="built_in">GetTreeDepth</span>(T, t-&gt;left);</span><br><span class="line">    <span class="type">int</span> RightDepth = <span class="built_in">GetTreeDepth</span>(T, t-&gt;right);</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">max</span>(LeftDepth, RightDepth) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">RBT::depth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">GetTreeDepth</span>(T, T-&gt;root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">RBT::size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">GetNodeCount</span>(T, T-&gt;root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">RBT::add</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">rbTree_insert</span>(&amp;T, key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">RBT::remove</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">rbTree_delete</span>(&amp;T, key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RBT::pt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">rbTree_prePrint</span>(T, T-&gt;root);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RBT::it</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">rbTree_inPrint</span>(T, T-&gt;root);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RBT::pot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">rbTree_postPrint</span>(T, T-&gt;root);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RBT::search</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">rbTree_search</span>(T, key);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">singleNumber</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        RBT rbt;</span><br><span class="line">        <span class="keyword">return</span> rbt.<span class="built_in">g</span>(nums);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Mysql基础知识</title>
    <url>/posts/6bbef560/</url>
    <content><![CDATA[<h1 id="Mysql学习"><a href="#Mysql学习" class="headerlink" title="Mysql学习"></a>Mysql学习</h1><h2 id="进入Mysql"><a href="#进入Mysql" class="headerlink" title="进入Mysql"></a>进入Mysql</h2><p>mysql -u root -p</p>
<h2 id="数据库三层结构"><a href="#数据库三层结构" class="headerlink" title="数据库三层结构"></a>数据库三层结构</h2><ol>
<li>所谓安装Mysql数据库，就是在主机安装一个数据管理系统(DBMS),这个管理程序可以管理多个数据库。DBMS(database manage system)</li>
<li>一个数据库中可以创建多个表，以保存数据</li>
<li>数据库管理系统(DBMS)、数据库和表的关系如图所示：DBMS-&gt;数据库db1-&gt;表1</li>
</ol>
<h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 使用指令创建</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE db01;</span><br><span class="line"># 创建一个使用utf8字符集的数据库</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE db03 <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8;</span><br><span class="line"># 创建一个使用utf8字符集，并带校队规则的db04数据库</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE db04 <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin</span><br></pre></td></tr></table></figure>

<h2 id="查看和删除数据库"><a href="#查看和删除数据库" class="headerlink" title="查看和删除数据库"></a>查看和删除数据库</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查看当前数据库服务器中的所有数据库</span><br><span class="line"><span class="keyword">SHOW</span> DATABASES</span><br><span class="line"># 查看前面创建的db04数据库的定义信息</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE `db04`</span><br><span class="line"># 说明，创建表的时候，为了避免关键字，可以使用反引号解决</span><br><span class="line"># 删除数据库</span><br><span class="line"><span class="keyword">DROP</span> DATABASE db01</span><br></pre></td></tr></table></figure>

<h2 id="备份恢复数据库"><a href="#备份恢复数据库" class="headerlink" title="备份恢复数据库"></a>备份恢复数据库</h2><ul>
<li><p>备份数据库命令行</p>
<ul>
<li>mysqldump -u 用户名 -p -B 数据库1 数据库2 &gt; 文件名.sql</li>
</ul>
</li>
<li><p>恢复数据库(进入Mysql命令行在执行)</p>
<ul>
<li>Source 文件名.sql</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 数据备份</span><br><span class="line">mysqldump <span class="operator">-</span>u root <span class="operator">-</span>p <span class="operator">-</span>B db02 db03 <span class="operator">&gt;</span> d:\\back</span><br><span class="line"><span class="keyword">DROP</span> DATABASE db02</span><br><span class="line"># 数据恢复</span><br><span class="line">source D:\\back.sql</span><br></pre></td></tr></table></figure>

<h2 id="备份恢复数据库的表"><a href="#备份恢复数据库的表" class="headerlink" title="备份恢复数据库的表"></a>备份恢复数据库的表</h2><ul>
<li><p>备份库的表</p>
<p> mysqlddump -u 用户名 -p密码 数据库 表1 表2 表n &gt; D:\文件名.sql</p>
</li>
</ul>
<h2 id="表的创建"><a href="#表的创建" class="headerlink" title="表的创建"></a>表的创建</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">	id <span class="type">INT</span>,</span><br><span class="line">	`name` <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">	`passward` <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">	`birthday` <span class="type">DATE</span>)</span><br><span class="line">	<span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin ENGINE INNODB;</span><br></pre></td></tr></table></figure>

<h2 id="Mysql的数据类型"><a href="#Mysql的数据类型" class="headerlink" title="Mysql的数据类型"></a>Mysql的数据类型</h2><ul>
<li><p>整数</p>
<ol>
<li>tinyint[一个字节]</li>
<li>smallint[2个字节]</li>
<li>mediumint[3个字节]</li>
<li>int[4个字节]</li>
<li>bigint[8个字节]</li>
</ol>
</li>
<li><p>小数类型</p>
<ol>
<li>float[单精度4个字节]</li>
<li>double[双精度8个字节]</li>
<li>decimal[M,D][大小不确定]</li>
</ol>
</li>
<li><p>文本类型</p>
<ol>
<li>char 0-255</li>
<li>varchar 0-65535</li>
<li>text 0-2^16-1</li>
<li>longtext 0-2^32-1</li>
</ol>
</li>
<li><p>二进制数据类型</p>
<ol>
<li>blob[0-2^16-1]</li>
<li>longblob[0-2^32-1]</li>
</ol>
</li>
<li><p>日期类型</p>
<ol>
<li>date [年月日]</li>
<li>time[时分秒]</li>
<li>datetime[年月日时分秒]</li>
</ol>
</li>
</ul>
<h2 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 演示日期</span><br><span class="line"># 创建一张表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t6(</span><br><span class="line">	birthday <span class="type">DATE</span>,</span><br><span class="line">	jobtime DATETIME,</span><br><span class="line">	login_time <span class="type">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span></span><br><span class="line">	<span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span>); # 自动更新</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t6;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t6(birthday,jobtime)</span><br><span class="line">		<span class="keyword">VALUES</span>(<span class="string">&#x27;2022-11-11&#x27;</span>,<span class="string">&#x27;2022-11-11 10:00:18&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 添加一个列</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t7</span><br><span class="line">	<span class="keyword">ADD</span> image1 <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">	AFTER RESUME</span><br><span class="line"># 修改一个列</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t7</span><br><span class="line">	MODIFY job <span class="type">VARCHAR</span>(<span class="number">60</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"># 删除一个列</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t7</span><br><span class="line">	<span class="keyword">DROP</span> sex</span><br><span class="line"># 修改表名</span><br><span class="line">RENAME <span class="keyword">TABLE</span> t7 <span class="keyword">TO</span> emp</span><br><span class="line"># 修改表的字符集为utf8</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8;</span><br><span class="line"># 修改列名</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp </span><br><span class="line">	CHANGE `name` user_name <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">DESC</span> emp;</span><br></pre></td></tr></table></figure>

<h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><ol>
<li><p>Insert语句 (添加数据)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># <span class="keyword">INSERT</span> 操作</span><br><span class="line"># 创建表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> goods(</span><br><span class="line">	id <span class="type">INT</span>,</span><br><span class="line">	goods_name <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">	price <span class="keyword">DOUBLE</span>);</span><br><span class="line"># 添加元素</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> goods (id,goods_name,price)</span><br><span class="line">	<span class="keyword">VALUES</span>(<span class="number">10</span>,<span class="string">&#x27;华为手机&#x27;</span>,<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> goods</span><br></pre></td></tr></table></figure>

<ul>
<li>细节说明<ol>
<li>插入的数据与字段的数据类型相同</li>
<li>插入的长度在列的规定范围内</li>
<li>在values中列出的数据位置必须与被加入的列的排列位置相对应</li>
<li>字符和日期数据应包含在单引号中</li>
<li>列可以插入空值</li>
<li>如果是给所有的字段添加数据，可以不写前面的字段名称</li>
<li>默认值的使用，当不给某个字段值时，如果有默认值就会添加，否则报错</li>
</ol>
</li>
</ul>
</li>
<li><p>Update语句 (修改元素)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 修改 <span class="keyword">Update</span></span><br><span class="line"># 修改所有的记录</span><br><span class="line"><span class="keyword">UPDATE</span> goods <span class="keyword">SET</span> id <span class="operator">=</span> <span class="number">11</span></span><br><span class="line"># 将编号为<span class="number">11</span>的修改价格</span><br><span class="line"><span class="keyword">UPDATE</span> goods</span><br><span class="line">	<span class="keyword">SET</span> price <span class="operator">=</span> <span class="number">3000</span></span><br><span class="line">	<span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">11</span></span><br><span class="line"># 在原来的基础上增加price</span><br><span class="line"><span class="keyword">UPDATE</span> goods</span><br><span class="line">	<span class="keyword">SET</span> price <span class="operator">=</span> price <span class="operator">+</span> <span class="number">1000</span></span><br><span class="line">	<span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">11</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用细节<ol>
<li>UPDATE语法可以用新值更新原有表行中的各列</li>
<li>SET子句指示要修改哪些行和要给予哪些值</li>
<li>WHERE子句指定应更新哪些行。如果没有WHERE，则更新所有的行</li>
<li>如果需要更新多个字段，可以通过 set 字段1&#x3D;值1，字段2&#x3D;值2</li>
</ol>
</li>
</ul>
</li>
<li><p>Delete语句 (删除元素)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 删除元素</span><br><span class="line"><span class="comment">-- delete</span></span><br><span class="line"><span class="comment">-- 删除编号为11的商品</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> goods</span><br><span class="line">	<span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">11</span></span><br><span class="line"><span class="comment">-- 	删除所有商品</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> good;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用细节<ol>
<li>如果不使用WHERE语句，将删除表中所有数据</li>
<li>Delete语句不能删除某一列的值(可使用update 设为null 或‘’)</li>
<li>使用delete语句仅删除记录，不删除表本身。如要删除表，使用drop table语句。drop table 表名</li>
</ol>
</li>
</ul>
</li>
<li><p>Select语句 (查找元素)</p>
<ul>
<li><p>基本语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">DISTINCT</span>] <span class="operator">*</span><span class="operator">|</span> &#123;column1,column2...&#125;</span><br><span class="line">			<span class="keyword">FROM</span> tablename;</span><br></pre></td></tr></table></figure>


</li>
<li><p>注意事项</p>
<ol>
<li>Select 指定查询哪些列的数据。</li>
<li>column 指定列名</li>
<li>*号代表查询所有列</li>
<li>From指定查询哪张表</li>
<li>DISINCT可选，指显示结果时，是否去掉重复数据</li>
</ol>
</li>
</ul>
</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询表中所有学生的信息。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student</span><br><span class="line"><span class="comment">-- 查询表中所有学生的姓名和对应的英语成绩</span></span><br><span class="line"><span class="keyword">SELECT</span> `name`,english</span><br><span class="line">	<span class="keyword">FROM</span> student</span><br><span class="line"><span class="comment">-- 过滤表中重复的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> english <span class="keyword">FROM</span> student</span><br><span class="line"><span class="comment">-- 要查询的记录，每个字段都相同时，才会去重</span></span><br></pre></td></tr></table></figure>

<h3 id="对列进行运算"><a href="#对列进行运算" class="headerlink" title="对列进行运算"></a>对列进行运算</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span><span class="operator">|</span>&#123;<span class="keyword">column</span><span class="operator">|</span>expression&#125;</span><br><span class="line">	<span class="keyword">from</span> tablename;</span><br></pre></td></tr></table></figure>

<h3 id="在select语句中可使用as语句"><a href="#在select语句中可使用as语句" class="headerlink" title="在select语句中可使用as语句"></a>在select语句中可使用as语句</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name <span class="keyword">as</span> 别名 <span class="keyword">from</span> 表明;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="comment">-- 统计每个学生的总分</span></span><br><span class="line"><span class="keyword">SELECT</span> `name`,(chinese<span class="operator">+</span>english<span class="operator">+</span>math) <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="comment">-- 在所有学生总分加10分的情况</span></span><br><span class="line"><span class="keyword">SELECT</span> `name`,(chinese<span class="operator">+</span>english<span class="operator">+</span>math <span class="operator">+</span> <span class="number">10</span>) <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="comment">-- 使用别名表示学生分数</span></span><br><span class="line"><span class="keyword">SELECT</span> `name`,(chinese<span class="operator">+</span>english<span class="operator">+</span>math <span class="operator">+</span> <span class="number">10</span>) <span class="keyword">AS</span> total_score <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure>

<h3 id="在where子句中进场使用的运算符"><a href="#在where子句中进场使用的运算符" class="headerlink" title="在where子句中进场使用的运算符"></a>在where子句中进场使用的运算符</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询姓名为赵云的学生成绩</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student</span><br><span class="line">	<span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;赵云&#x27;</span></span><br><span class="line"><span class="comment">-- 查询英语成绩大于90分的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student</span><br><span class="line">	<span class="keyword">WHERE</span> english <span class="operator">&gt;=</span> <span class="number">90</span></span><br><span class="line"><span class="comment">-- 查询总分大于200的所有同学</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student</span><br><span class="line">	<span class="keyword">WHERE</span> (chinese <span class="operator">+</span> english <span class="operator">+</span> math) <span class="operator">&gt;=</span> <span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student</span><br><span class="line">	<span class="keyword">WHERE</span> math <span class="operator">&gt;=</span> <span class="number">60</span> <span class="keyword">AND</span> id <span class="operator">&gt;</span> <span class="number">4</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student</span><br><span class="line">	<span class="keyword">WHERE</span> (english <span class="operator">&gt;</span> chinese)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student</span><br><span class="line">	<span class="keyword">WHERE</span> (chinese <span class="operator">+</span> english <span class="operator">+</span> math) <span class="operator">&gt;=</span> <span class="number">200</span> <span class="keyword">AND</span> math <span class="operator">&lt;</span> chinese <span class="keyword">AND</span> `name` <span class="keyword">LIKE</span> <span class="string">&#x27;赵%&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="使用order-by-语句排序查询结果"><a href="#使用order-by-语句排序查询结果" class="headerlink" title="使用order by 语句排序查询结果"></a>使用order by 语句排序查询结果</h3><p>SELECT column1,column2.. from table;order by column asc|desc</p>
<ol>
<li>Order by 指定排序的列，排序的列既可以是表中的列名，也可以是select语句后指定的列名</li>
<li>Asc升序、Desc降序</li>
<li>ORDER BY 子句应文娱select语句的结尾</li>
</ol>
<h2 id="统计函数"><a href="#统计函数" class="headerlink" title="统计函数"></a>统计函数</h2><h3 id="Count"><a href="#Count" class="headerlink" title="Count"></a>Count</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 统计函数</span></span><br><span class="line"><span class="comment">-- count</span></span><br><span class="line"><span class="comment">-- 统计一个班级共有多少个大学生 </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="comment">-- 统计数学成绩大于90的学生有多少个</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> student</span><br><span class="line">	<span class="keyword">WHERE</span> math <span class="operator">&gt;</span> <span class="number">90</span></span><br><span class="line"><span class="comment">-- 统计总分大于250的人数有多少</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> student</span><br><span class="line">	<span class="keyword">WHERE</span> (chinese <span class="operator">+</span> english <span class="operator">+</span> math) <span class="operator">&gt;</span> <span class="number">250</span>;</span><br><span class="line"><span class="comment">-- count(*) 和count的区别</span></span><br><span class="line"><span class="comment">-- 解释：count(*) 返回满足条件的记录的总数</span></span><br><span class="line"><span class="comment">-- count(列)：统计满足条件的某列有多少个，但是会排除(null)</span></span><br></pre></td></tr></table></figure>

<h3 id="Sum"><a href="#Sum" class="headerlink" title="Sum"></a>Sum</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(math) <span class="keyword">FROM</span> student;	</span><br></pre></td></tr></table></figure>

<h3 id="AVG"><a href="#AVG" class="headerlink" title="AVG"></a>AVG</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(math) <span class="keyword">FROM</span> student</span><br></pre></td></tr></table></figure>

<h3 id="Max-x2F-Min"><a href="#Max-x2F-Min" class="headerlink" title="Max&#x2F;Min"></a>Max&#x2F;Min</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(math) <span class="keyword">FROM</span> student</span><br></pre></td></tr></table></figure>

<h3 id="分组统计"><a href="#分组统计" class="headerlink" title="分组统计"></a>分组统计</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sal),<span class="built_in">MAX</span>(sal),deptno </span><br><span class="line">		<span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno;</span><br><span class="line">		</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sal),<span class="built_in">MIN</span>(sal),deptno ,job <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno,job</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sal),deptno</span><br><span class="line">	<span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno</span><br><span class="line">	<span class="keyword">HAVING</span> <span class="built_in">AVG</span>(sal) <span class="operator">&lt;</span> <span class="number">2000</span></span><br></pre></td></tr></table></figure>

<h2 id="字符串相关函数"><a href="#字符串相关函数" class="headerlink" title="字符串相关函数"></a>字符串相关函数</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 演示字符串相关函数的使用</span></span><br><span class="line"><span class="comment">-- CHARSET(str) # 返回子串字符集</span></span><br><span class="line"><span class="keyword">SELECT</span> CHARSET(ename) <span class="keyword">FROM</span> emp</span><br><span class="line"><span class="comment">-- CONCAT(string2 [,...]) # 连接子串</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(ename,<span class="string">&#x27; job is &#x27;</span>,job) <span class="keyword">FROM</span> emp</span><br><span class="line"><span class="comment">-- INSTR(string,substring) # 返回substring在string中出现的位置，没有返回0</span></span><br><span class="line"><span class="keyword">SELECT</span> INSTR(<span class="string">&#x27;hanshunping&#x27;</span>,<span class="string">&#x27;han&#x27;</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="comment">-- UCASE(string2) #转换成大写</span></span><br><span class="line"><span class="keyword">SELECT</span> UCASE(ename) <span class="keyword">FROM</span> emp</span><br><span class="line"><span class="comment">-- LCASE(string2) # 转换成小写</span></span><br><span class="line"><span class="keyword">SELECT</span> LCASE(ename) <span class="keyword">FROM</span> emp</span><br><span class="line"><span class="comment">-- LEFT(string2,length) # 从string2中的左边起取length个字符</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LEFT</span>(ename,<span class="number">2</span>) <span class="keyword">FROM</span> emp</span><br><span class="line"><span class="comment">-- RIGHT(string2,length) # 从string2中的右边起取length个字符</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">RIGHT</span>(ename,<span class="number">2</span>) <span class="keyword">FROM</span> emp</span><br><span class="line"><span class="comment">-- LENGTH(string) # string的长度</span></span><br><span class="line"><span class="keyword">SELECT</span> LENGTH(ename) <span class="keyword">FROM</span> emp</span><br><span class="line"><span class="comment">-- REPLACE(str,search_str,replace_str) # 在str中用replace_str替换search_str</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,REPLACE(job,<span class="string">&#x27;MANAGE&#x27;</span>,<span class="string">&#x27;经理&#x27;</span>) <span class="keyword">FROM</span> emp</span><br><span class="line"><span class="comment">-- STRCMP(string1,string2) # 逐字符比较两字符串大小</span></span><br><span class="line"><span class="keyword">SELECT</span> STRCMP(<span class="string">&#x27;hsp&#x27;</span>,<span class="string">&#x27;jsp&#x27;</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="comment">-- SBUSTRING(str,position[,length]) # 从str的position开始【从1开始计算】，取length个字符</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUBSTRING</span>(ename,<span class="number">1</span>,<span class="number">2</span>) <span class="keyword">FROM</span> emp</span><br><span class="line"><span class="comment">-- LTRIM(string) RIGIM(string)trim # 去除前端空格或后端空格</span></span><br><span class="line"><span class="keyword">SELECT</span> LTRIM(<span class="string">&#x27;   韩顺平教育&#x27;</span>) <span class="keyword">FROM</span> DUAL</span><br></pre></td></tr></table></figure>

<h2 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 演示数学函数</span><br><span class="line"><span class="comment">-- abs(num) 绝对值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ABS</span>(<span class="number">-1</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="comment">-- bin(decimal_num) 十进制转二进制</span></span><br><span class="line"><span class="keyword">SELECT</span> BIN(<span class="number">17</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="comment">-- ceiling(num)   向上取整</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CEILING</span>(<span class="number">11.4</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="comment">-- conv(number1,from_base,to_base)  进制转换</span></span><br><span class="line"><span class="keyword">SELECT</span> CONV(<span class="number">12</span>,<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="comment">-- floor(num) 向下取整</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">FLOOR</span>(<span class="number">12.5</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="comment">-- format(number,decimal_places)     保留小数位数</span></span><br><span class="line"><span class="keyword">SELECT</span> FORMAT(<span class="number">1.111111</span>,<span class="number">2</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="comment">-- Hex(num) 转十六进制</span></span><br><span class="line"><span class="keyword">SELECT</span> HEX(<span class="number">17</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="comment">-- least(num,num1,...) 求最小值</span></span><br><span class="line"><span class="keyword">SELECT</span> LEAST(<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="comment">-- mod(num,num1) 求余</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MOD</span>(<span class="number">12</span>,<span class="number">5</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="comment">-- rand([seed])    rand([seed]) 范围是0-1</span></span><br><span class="line"><span class="keyword">SELECT</span> RAND() <span class="keyword">FROM</span> DUAL</span><br></pre></td></tr></table></figure>

<h2 id="时间日期相关函数"><a href="#时间日期相关函数" class="headerlink" title="时间日期相关函数"></a>时间日期相关函数</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- current_date() 当期日期</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_DATE</span>() <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="comment">-- current_time() 当期时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_TIME</span>() <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="comment">-- current_timestamp() 当前时间戳</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_TIMESTAMP</span>() <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="comment">-- date(datetime) 返回datetime的日期部分</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="type">DATE</span>(<span class="built_in">CURRENT_TIMESTAMP</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="comment">-- date_add(date2,interval d_value d_type) 在date上加上日期或时间</span></span><br><span class="line"><span class="keyword">SELECT</span> DATE_ADD(NOW(),<span class="type">INTERVAL</span> <span class="number">10</span> <span class="keyword">MINUTE</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="comment">-- date_sub(date2,INTERVAL d_value d_type) 在date上减去一个日期</span></span><br><span class="line"><span class="keyword">SELECT</span> DATE_SUB(NOW(),<span class="type">INTERVAL</span> <span class="number">10</span> <span class="keyword">MINUTE</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="comment">-- datediff(date1,date2) 两个日期差</span></span><br><span class="line"><span class="keyword">SELECT</span> DATEDIFF(<span class="built_in">CURRENT_DATE</span>,<span class="string">&#x27;2022-9-24&#x27;</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="comment">-- timediff(date1,date2) 两个日期差</span></span><br><span class="line"><span class="keyword">SELECT</span> TIMEDIFF(NOW(),<span class="string">&#x27;2022-9-23 12:0:0&#x27;</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="comment">-- now() 当前时间</span></span><br><span class="line"><span class="keyword">SELECT</span> NOW() <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="comment">-- year|month|date(datetime) 年月日</span></span><br><span class="line"><span class="comment">-- from_unixtime() 年月日</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(NOW()) <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="comment">-- 得到的是1970-1-1到现在的毫秒数 </span></span><br><span class="line"><span class="keyword">SELECT</span> UNIX_TIMESTAMP()</span><br><span class="line"><span class="keyword">SELECT</span> FROM_UNIXTIME(<span class="number">1618483484</span>,<span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>) <span class="keyword">FROM</span> DUAL</span><br></pre></td></tr></table></figure>

<h2 id="加密函数"><a href="#加密函数" class="headerlink" title="加密函数"></a>加密函数</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 演示加密函数</span></span><br><span class="line"><span class="comment">-- user() 查询用户</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>() <span class="keyword">FROM</span> DUAL; <span class="comment">-- 用户@IP地址</span></span><br><span class="line"><span class="comment">-- database() 数据库名称</span></span><br><span class="line"><span class="keyword">SELECT</span> DATABASE() <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="comment">-- md5(str) 为字符串算出一个 MD5 32的字符串，(用户密码)加密</span></span><br><span class="line"><span class="keyword">SELECT</span> MD5(<span class="string">&#x27;hsp&#x27;</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="keyword">SELECT</span> LENGTH(MD5(<span class="string">&#x27;hsp&#x27;</span>)) <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="comment">-- password(str)</span></span><br><span class="line"><span class="comment">-- select * from mysql.user \从原文密码str 计算并返回密码字符串，通常用于mysql</span></span><br><span class="line"><span class="keyword">SELECT</span> PASSWORD(<span class="string">&#x27;hsp&#x27;</span>) <span class="keyword">FROM</span> DUAL</span><br></pre></td></tr></table></figure>

<h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 流程控制函数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">SELECT</span> IF(<span class="literal">TRUE</span>,<span class="string">&#x27;北京&#x27;</span>,<span class="string">&#x27;上海&#x27;</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="keyword">SELECT</span> IFNULL(<span class="keyword">NULL</span>,<span class="string">&#x27;韩顺平教育&#x27;</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="literal">TRUE</span> <span class="keyword">THEN</span> <span class="string">&#x27;jack&#x27;</span> <span class="keyword">WHEN</span> <span class="literal">FALSE</span> <span class="string">&#x27;tom&#x27;</span> <span class="keyword">ELSE</span> <span class="string">&#x27;mary&#x27;</span> <span class="keyword">END</span></span><br></pre></td></tr></table></figure>

<h2 id="加强排序"><a href="#加强排序" class="headerlink" title="加强排序"></a>加强排序</h2><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><ul>
<li>%：表示0到多个任意字符。</li>
<li>_：表示单个任意字符</li>
</ul>
<h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><p>select … limit start,rows</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">-- 第一页</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp</span><br><span class="line">	<span class="keyword">ORDER</span> <span class="keyword">BY</span> empno</span><br><span class="line">	LIMIT <span class="number">0</span>,<span class="number">3</span></span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1,column2,column3 ... <span class="keyword">FROM</span> <span class="keyword">TABLE</span></span><br><span class="line">	<span class="keyword">GROUP</span> column1</span><br><span class="line">	<span class="keyword">HAVING</span> <span class="keyword">CONDITION</span></span><br><span class="line">	<span class="keyword">ORDER</span> <span class="keyword">BY</span> column1</span><br><span class="line">	LIMIT <span class="keyword">START</span>,<span class="keyword">ROWS</span></span><br><span class="line">	</span><br><span class="line"><span class="comment">-- 案例</span></span><br><span class="line"><span class="comment">-- 统计各个部门group by 的平均工资，并且是大于1000的having，并且按照平均工资从高到低</span></span><br><span class="line"><span class="comment">-- 取出前两行记录</span></span><br><span class="line"><span class="keyword">SELECT</span> deptno,<span class="built_in">AVG</span>(sal) <span class="keyword">AS</span> avg_sal <span class="keyword">FROM</span> emp</span><br><span class="line">	<span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno</span><br><span class="line">	<span class="keyword">HAVING</span> avg_sal <span class="operator">&gt;</span> <span class="number">1000</span></span><br><span class="line">	<span class="keyword">ORDER</span> <span class="keyword">BY</span> avg_sal <span class="keyword">DESC</span></span><br><span class="line">	LIMIT <span class="number">0</span>,<span class="number">2</span></span><br></pre></td></tr></table></figure>

<h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 1.从第一张表中，取出一行，和第二张的每条记录拼接，返回结果[含有两张表的所有列</span></span><br><span class="line"><span class="comment"> 2.一共返回的记录数，第一张表*第二张表的行数,称为笛卡尔集</span></span><br><span class="line"><span class="comment"> 3.解决这个多表的关键就是要写出正确的过滤条件where</span></span><br><span class="line"><span class="comment"> 4.当我们需要指示某个表的列时,需要表.列</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal,dname,emp.deptno</span><br><span class="line">	<span class="keyword">FROM</span> emp,dept</span><br><span class="line">	<span class="keyword">WHERE</span> emp.deptno <span class="operator">=</span> dept.deptno</span><br><span class="line">	<span class="keyword">ORDER</span> <span class="keyword">BY</span> emp.deptno <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>

<h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 显示公司员工和他的上级的名字</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">SELECT</span> worker.ename,boss.ename</span><br><span class="line">	<span class="keyword">FROM</span> emp worker,emp boss</span><br><span class="line">	<span class="keyword">WHERE</span> worker.mgr<span class="operator">=</span>boss.empno;</span><br></pre></td></tr></table></figure>

<h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><h4 id="单行子查询"><a href="#单行子查询" class="headerlink" title="单行子查询"></a>单行子查询</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line">	<span class="keyword">FROM</span> emp</span><br><span class="line">	<span class="keyword">WHERE</span> deptno <span class="operator">=</span> (</span><br><span class="line">		<span class="comment">-- 子查询</span></span><br><span class="line">		<span class="keyword">SELECT</span> deptno</span><br><span class="line">			<span class="keyword">FROM</span> emp</span><br><span class="line">			<span class="keyword">WHERE</span> ename <span class="operator">=</span> <span class="string">&#x27;SMITH&#x27;</span></span><br><span class="line">	)</span><br></pre></td></tr></table></figure>

<h4 id="多行子查询"><a href="#多行子查询" class="headerlink" title="多行子查询"></a>多行子查询</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查找</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,job,sal,deptno</span><br><span class="line">	<span class="keyword">FROM</span> emp</span><br><span class="line">	<span class="keyword">WHERE</span> job <span class="keyword">IN</span> (</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> job <span class="keyword">FROM</span> emp</span><br><span class="line">		<span class="keyword">WHERE</span> deptno<span class="operator">=</span><span class="number">10</span>) <span class="keyword">AND</span> deptno <span class="operator">!=</span> <span class="number">10</span></span><br></pre></td></tr></table></figure>

<h4 id="子查询当临时表"><a href="#子查询当临时表" class="headerlink" title="子查询当临时表"></a>子查询当临时表</h4><h4 id="all操作符"><a href="#all操作符" class="headerlink" title="all操作符"></a>all操作符</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ename,sal,deptno</span><br><span class="line">	<span class="keyword">FROM</span> emp</span><br><span class="line">	<span class="keyword">WHERE</span> sal <span class="operator">&gt;</span> <span class="keyword">ALL</span>(<span class="keyword">SELECT</span> sal <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">30</span>)</span><br></pre></td></tr></table></figure>

<h4 id="any操作符"><a href="#any操作符" class="headerlink" title="any操作符"></a>any操作符</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- any操作符</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal,deptno</span><br><span class="line">	<span class="keyword">FROM</span> emp</span><br><span class="line">	<span class="keyword">WHERE</span> sal <span class="operator">&gt;</span> <span class="keyword">ANY</span>(<span class="keyword">SELECT</span> sal <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">30</span>)</span><br></pre></td></tr></table></figure>

<h3 id="多列子查询"><a href="#多列子查询" class="headerlink" title="多列子查询"></a>多列子查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp</span><br><span class="line">	<span class="keyword">WHERE</span> (deptno,job) <span class="operator">=</span> (<span class="keyword">SELECT</span> deptno,job</span><br><span class="line">				<span class="keyword">FROM</span> emp</span><br><span class="line">				<span class="keyword">WHERE</span> ename <span class="operator">=</span> <span class="string">&#x27;SMITH&#x27;</span>) <span class="keyword">AND</span> ename <span class="operator">!=</span> <span class="string">&#x27;SMITH&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="表复制"><a href="#表复制" class="headerlink" title="表复制"></a>表复制</h2><ul>
<li><p>自我复制数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 表数据的迁移</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> my_tab01</span><br><span class="line">	(id,`name`,sal,job,deptno)</span><br><span class="line">	<span class="keyword">SELECT</span> empno,ename,sal,job,deptno <span class="keyword">FROM</span> emp;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"><span class="comment">-- 自我复制</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> my_tab01</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> my_tab01;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="合并查询"><a href="#合并查询" class="headerlink" title="合并查询"></a>合并查询</h2><ul>
<li><p>介绍</p>
<p>有时在实际应用中，为了合并多个select语句的结果，可以使用集合操作符号union,union all</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 合并查询</span></span><br><span class="line"><span class="comment">-- 会去重</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal,job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal <span class="operator">&gt;</span> <span class="number">2500</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal,job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job <span class="operator">=</span> <span class="string">&#x27;MANAGER&#x27;</span></span><br><span class="line"><span class="comment">-- 不去重</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal,job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal <span class="operator">&gt;</span> <span class="number">2500</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal,job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job <span class="operator">=</span> <span class="string">&#x27;MANAGER&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="表外连接"><a href="#表外连接" class="headerlink" title="表外连接"></a>表外连接</h2><ul>
<li>左外连接 (如果左侧的表完全显示我们就说是左外连接)</li>
<li>右外连接 (如果右侧的表完全显示我们就说是右外连接)</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 左外连接</span></span><br><span class="line"><span class="keyword">SELECT</span> `name`,stu.id,grade</span><br><span class="line">	<span class="keyword">FROM</span> stu <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> exam</span><br><span class="line">	<span class="keyword">ON</span> stu.id <span class="operator">=</span> exam.id</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"><span class="comment">-- 右外连接</span></span><br><span class="line"><span class="keyword">SELECT</span> `name`,stu.id,grade</span><br><span class="line">	<span class="keyword">FROM</span> stu <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> exam</span><br><span class="line">	<span class="keyword">ON</span> stu.id <span class="operator">=</span> exam.id</span><br></pre></td></tr></table></figure>

<h2 id="mysql约束"><a href="#mysql约束" class="headerlink" title="mysql约束"></a>mysql约束</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>约束用于确保数据库的数据满足特定的商业规则，在mysql中约束包括：not null、unique、primary key、foreign key、和check五种</p>
<h3 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h3><h5 id="细节："><a href="#细节：" class="headerlink" title="细节："></a>细节：</h5><ol>
<li>primary key不能重复而且不能为null</li>
<li>一张表最多只能有一个主键，但可以是复合主键</li>
<li>直接在字段后指定：字段名 primary key</li>
<li>在表定义最后写primary key(列名)</li>
<li>使用desc表名，可以看到primary key的情况</li>
</ol>
<h3 id="not-null-非空"><a href="#not-null-非空" class="headerlink" title="not null(非空)"></a>not null(非空)</h3><p>如果在列上定义了not null，那么当插入数据时，必须为列提供数据。</p>
<p>字段名 字段类型 not null</p>
<h3 id="unique-唯一"><a href="#unique-唯一" class="headerlink" title="unique(唯一)"></a>unique(唯一)</h3><p>当定义了唯一约束后，该列值是不能重复的</p>
<p>字段名 字段类型 unique</p>
<h4 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h4><ol>
<li>如果没有指定not null，则unique字段可以有多个null</li>
<li>一张表可以有多个unique字段</li>
</ol>
<h3 id="外键-foreign-key"><a href="#外键-foreign-key" class="headerlink" title="外键(foreign key)"></a>外键(foreign key)</h3><p>用于定义主表和从表之间的关系：外键约束要定义在从表上，主表则必须具有主键约束或是unique约束，要求外键列数据必须在主表的主键列存在或是为null</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 外键演示</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> my_class(id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,`name` <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> my_stu(id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,`name` <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,class_id <span class="type">INT</span>,</span><br><span class="line">	<span class="keyword">FOREIGN</span> KEY(class_id) <span class="keyword">REFERENCES</span> my_class(id))</span><br></pre></td></tr></table></figure>

<h4 id="使用细节"><a href="#使用细节" class="headerlink" title="使用细节"></a>使用细节</h4><ol>
<li>外键指向的表的字段，要求是primary key或者是unique</li>
<li>表的类型是innodb，这样的表才支持外键</li>
<li>外键字段的类型要和主键字段的类型一致(长度可以不同)</li>
<li>外键字段的值，必须在主键字段中出现过，或者为null</li>
<li>一旦建立主外键的关系，数据就不能随意删除了</li>
</ol>
<h3 id="check约束"><a href="#check约束" class="headerlink" title="check约束"></a>check约束</h3><p>要求强制行数据必须满足的条件，假定在列上定义了check约束，并要求sal列值在1000~2000之间就会提示出错</p>
<h3 id="自增长"><a href="#自增长" class="headerlink" title="自增长"></a>自增长</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 自增长的使用</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t8</span><br><span class="line">	(id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">	email <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27; &#x27;</span>,</span><br><span class="line">	`name` <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27; &#x27;</span>);</span><br><span class="line"><span class="keyword">DESC</span> t8</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t8</span><br><span class="line">	<span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;sdfsdf&#x27;</span>,<span class="string">&#x27;tom&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="使用细节-1"><a href="#使用细节-1" class="headerlink" title="使用细节"></a>使用细节</h4><ol>
<li>一般来说自增长是和primary key 配合使用的</li>
<li>自增长也可以单独使用</li>
<li>自增长修饰的字符为整数型的</li>
<li>自增长默认从1开始，你也可以通过如下命令修改alter table 表名 auto_increment &#x3D; xxx;</li>
</ol>
<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX empno_index <span class="keyword">ON</span> emp (empno) <span class="comment">-- 创建索引</span></span><br></pre></td></tr></table></figure>

<h3 id="索引的原理"><a href="#索引的原理" class="headerlink" title="索引的原理"></a>索引的原理</h3><p>进行全表扫描，查询速度慢，创建索引，底层是二叉树，磁盘占用增大，影响了(修改、增加和删除速度的影响)，在日常使用中select使用最多</p>
<h3 id="索引的类型"><a href="#索引的类型" class="headerlink" title="索引的类型"></a>索引的类型</h3><ol>
<li>主键索引，主键自动的为主索引</li>
<li>唯一索引(UNIQUE)——CREATE UNIQUE INDEX id_index on 表名</li>
<li>普通索引(INDEX)——CREATE INDEX id_index on 表名</li>
<li>全文索引(FULLTEXT)</li>
</ol>
<ul>
<li>查询表是否有索引——show indexs from 表名</li>
</ul>
<h4 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h4><p>DROP INDEX id_index ON 表名</p>
<p>ALTER TABLE 表明 DROP primary key ——删除主键索引</p>
<h4 id="查询索引"><a href="#查询索引" class="headerlink" title="查询索引"></a>查询索引</h4><ol>
<li>SHOW INDEX FROM 表名</li>
<li>SHOW INDEXS FROM 表名</li>
<li>SHOW KEYS FROM 表名</li>
<li>DESC 表名</li>
</ol>
<h2 id="Mysql事务"><a href="#Mysql事务" class="headerlink" title="Mysql事务"></a>Mysql事务</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>事务用于保证数据的一致性，它由一组相关的dml语句组成，该组的dml语句要么全部成功，要么全部失败。</p>
<h3 id="事务和锁"><a href="#事务和锁" class="headerlink" title="事务和锁"></a>事务和锁</h3><p>当执行事务操作时(dml语句)，mysql会在表上加锁，防止其他用户改表的数据，这对用户来说是非常重要的</p>
<ul>
<li>mysql数据库控制台事务的几个重要操作<ol>
<li>start transaction ——开始一个事务</li>
<li>savepoint 保存点名 ——设置保存点</li>
<li>rollback to 保存点名 ——回退事务</li>
<li>rollback —— 回退全部事务</li>
<li>commit ——提交事务，所有的操作生效，不能回退</li>
</ol>
</li>
</ul>
<h3 id="事务细节"><a href="#事务细节" class="headerlink" title="事务细节"></a>事务细节</h3><ol>
<li>如果不开始事务，默认情况下，dml操作是自动提交的，不能回滚</li>
<li>如果开始一个事务，你没有创建保存点。你可以执行rollback，默认就是回到事务开始的状态</li>
<li>你也可以在这个事务中，创建多个保存点</li>
<li>你可以在事务没有提交前，选择回退到哪个保存点</li>
<li>mysql的事务机制需要innodb的存储引擎可以使用，myisam不好使</li>
<li>开始一个事务start transaction或set autocommit&#x3D;off</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 开始事务</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION</span><br><span class="line"><span class="comment">-- 设置保存点</span></span><br><span class="line"><span class="keyword">SAVEPOINT</span> a</span><br><span class="line"><span class="comment">-- 执行dml操作</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t9 <span class="keyword">VALUES</span>(<span class="number">100</span>,<span class="string">&#x27;tom&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t9</span><br><span class="line"><span class="keyword">SAVEPOINT</span> b</span><br><span class="line"><span class="comment">-- 执行dml操作</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t9 <span class="keyword">VALUES</span>(<span class="number">200</span>,<span class="string">&#x27;tom&#x27;</span>);</span><br><span class="line"><span class="comment">-- 回退到b</span></span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> b</span><br><span class="line"><span class="comment">-- 回退到a</span></span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> a</span><br><span class="line"><span class="comment">-- 回退到事务开始时</span></span><br><span class="line"><span class="keyword">ROLLBACK</span></span><br><span class="line"><span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">COMMIT</span></span><br></pre></td></tr></table></figure>

<h3 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h3><ol>
<li>多个连接开启各自事务数据库中数据时，数据库系统要负责隔离操作，以保证各个连接在获取数据时的准确性</li>
<li>如果不考虑隔离性，可能会引发如下问题：<ul>
<li>脏读：当一个事务读取另一个事务尚未提交的修改时，产生脏读</li>
<li>不可重复读：同一查询在同一事物中多次进行，由于其他提交事务所作的修改或删除，每次返回不同的结果集，此时发生不可重复读</li>
<li>幻读：同一查询在同一事务中多次进行，由于其他提交事务所做的插入操作，每次返回不同的结果集，此时发生幻读</li>
</ul>
</li>
</ol>
<img src="/posts/6bbef560/1.png" class title="图片">

<ol>
<li>查看当前会话隔离级别:select @@tx_isolation</li>
<li>查看系统当前隔离级别:select @@global.tx_isolation</li>
<li>设置当前会话隔离级别:set session transaction level repeatable read;</li>
<li>设置系统当前隔离级别:set global transaction isolation level repeatable read;</li>
<li>mysql默认的事务隔离级别是repeatable read，一般情况下，没有特殊要求，没有必要修改</li>
</ol>
<h3 id="mysql事务ACID"><a href="#mysql事务ACID" class="headerlink" title="mysql事务ACID"></a>mysql事务ACID</h3><h4 id="事务的acid特性"><a href="#事务的acid特性" class="headerlink" title="事务的acid特性"></a>事务的acid特性</h4><ul>
<li><p>原子性(Atomicity)</p>
<p>原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生</p>
</li>
<li><p>一致性(Consistency)</p>
<p>事务必须使数据库从一个一致性状态变换到另外一个一致性状态</p>
</li>
<li><p>隔离性(Isolation)</p>
<p>事务的隔离性是多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其他事务的操作数据所干扰，多个并发事务之间要相互隔离</p>
</li>
<li><p>持久性(Durability)</p>
<p>持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发生故障也不应该对其有任何影响</p>
</li>
</ul>
<h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><img src="/posts/6bbef560/2.png" class title="图片">

<h3 id="细节说明"><a href="#细节说明" class="headerlink" title="细节说明"></a>细节说明</h3><ol>
<li>MyISAM不支持事务，也不支持外键，但其访问速度块，对事务完整性没有要求</li>
<li>InnoDB存储引擎提供了具有提交、回滚、和崩溃恢复能力的事务安全。但是比起MyISAM存储引擎，InnoDB写的处理效率差一些并且会占用更多的磁盘空间以保留数据和索引。</li>
<li>MEMORY存储引擎使用存在内存中的内容来创建表，每个MEMORY表只实际对应一个磁盘空间。MEMORY类型的表访问速度非常快，因为它的数据是放在内存中的，并且默认使用HASH索引。但是一旦服务关闭，表中的数据就会丢失掉，表的结构还在。</li>
</ol>
<h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>视图是一个虚拟表，其内容由查询定义。同真实的表一样，视图包含列，其数据来自真实表，修改视图的数据也可以修改基表的数据</p>
<h3 id="视图的基本使用"><a href="#视图的基本使用" class="headerlink" title="视图的基本使用"></a>视图的基本使用</h3><ol>
<li>create view 视图名 as select语句</li>
<li>alter view 视图名 as select语句</li>
<li>SHOW CREATE VIEW 视图名</li>
<li>drop view 视图名1，…</li>
</ol>
<h3 id="视图细节"><a href="#视图细节" class="headerlink" title="视图细节"></a>视图细节</h3><ol>
<li>创建视图时，到数据库去看，对应视图只有一个视图结构文件</li>
<li>视图的数据变化会影响基类</li>
<li>视图中可以在使用视图</li>
</ol>
<h2 id="Mysql用户管理"><a href="#Mysql用户管理" class="headerlink" title="Mysql用户管理"></a>Mysql用户管理</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建用户</span></span><br><span class="line"><span class="comment">-- CREATE USER dbadmin@localhost </span></span><br><span class="line"><span class="comment">-- IDENTIFIED BY &#x27;pwd123&#x27;;</span></span><br><span class="line"><span class="comment">-- 权限管理</span></span><br><span class="line"><span class="comment">-- grant 权限列表 on 库.对象名 to &#x27;用户名&#x27;@&#x27;登录位置&#x27; [identified by &#x27;密码&#x27;]修改密码</span></span><br><span class="line"><span class="comment">-- 回收权限</span></span><br><span class="line"><span class="comment">-- REVOKE 权限列表 ON 库.对象名 FROM &#x27;用户名&#x27;@&#x27;登录位置&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 权限管理</span></span><br><span class="line"><span class="comment">-- grant 权限列表 on 库.对象名 to &#x27;用户名&#x27;@&#x27;登录位置&#x27; [identified by &#x27;密码&#x27;]修改密码</span></span><br><span class="line"><span class="comment">-- 回收权限</span></span><br><span class="line"><span class="keyword">REVOKE</span> 权限列表 <span class="keyword">ON</span> 库.对象名 <span class="keyword">FROM</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;登录位置&#x27;</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;hjl&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span></span><br><span class="line">	mysql.user</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE testdb</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> db01(id <span class="type">INT</span>,`name` <span class="type">VARCHAR</span>(<span class="number">32</span>));</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">INSERT</span> <span class="keyword">ON</span> testdb.db01 <span class="keyword">TO</span> <span class="string">&#x27;hjl&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="细节-1"><a href="#细节-1" class="headerlink" title="细节"></a>细节</h3><ol>
<li>在创建用户的时候，如果不指定Host，则为%,%表示所有IP都有连接权限</li>
<li>在删除用户时，如果host不是%，需要明确指定’用户‘@’host指’</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Java学习</title>
    <url>/posts/0/</url>
    <content><![CDATA[<h1 id="Java学习"><a href="#Java学习" class="headerlink" title="Java学习"></a>Java学习</h1><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><img src="/posts/0/3.png" class title="图片">

<img src="/posts/0/4.png" class title="图片">

<h3 id="Collection接口"><a href="#Collection接口" class="headerlink" title="Collection接口"></a>Collection接口</h3><h4 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">add();<span class="comment">//添加元素</span></span><br><span class="line">remove();<span class="comment">//删除元素，可删除元素或索引</span></span><br><span class="line">contains();<span class="comment">//查看某个元素是否存在</span></span><br><span class="line">isEmpty();<span class="comment">//判断是否为空</span></span><br><span class="line">size();<span class="comment">//获取集合元素个数</span></span><br><span class="line">clear();<span class="comment">//清空集合</span></span><br><span class="line">addAll();<span class="comment">//添加多个元素</span></span><br><span class="line">containsAll();<span class="comment">//查找多个元素是否存在</span></span><br><span class="line">removeAll();<span class="comment">//删除多个元素 </span></span><br></pre></td></tr></table></figure>

<h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><h5 id="迭代器遍历"><a href="#迭代器遍历" class="headerlink" title="迭代器遍历"></a>迭代器遍历</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> arrayList.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">next</span> <span class="operator">=</span>  it.next();</span><br><span class="line">            System.out.println(next);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//hasNext判断是否还有元素</span></span><br></pre></td></tr></table></figure>

<h5 id="for循环遍历"><a href="#for循环遍历" class="headerlink" title="for循环遍历"></a>for循环遍历</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(Object key:arrayList) &#123;</span><br><span class="line">            System.out.println(key);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//底层仍然是迭代器遍历</span></span><br></pre></td></tr></table></figure>

<h4 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h4><h5 id="List接口介绍"><a href="#List接口介绍" class="headerlink" title="List接口介绍"></a>List接口介绍</h5><ul>
<li>List集合类中元素有序、且可重复</li>
<li>List集合类支持索引 &#x2F;&#x2F;list.get(index)</li>
<li>List容器的元素都对应一个整数型的序号记载其在容器的位置，可以根据序号存取容器的元素</li>
<li>常见的有：ArrayList、LinkedList、Vector</li>
</ul>
<h5 id="常见方法-1"><a href="#常见方法-1" class="headerlink" title="常见方法"></a>常见方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">indexOf(<span class="string">&quot;ans&quot;</span>);<span class="comment">//查找ans在集合的位置</span></span><br><span class="line">set(index,Object ele);<span class="comment">//设置指定index位置的元素为ele，相当于替换</span></span><br><span class="line">subList(<span class="type">int</span> fromindex,<span class="type">int</span> toindex);<span class="comment">//返回从fromindex到toindex位置的子集合，左闭右开</span></span><br></pre></td></tr></table></figure>

<h5 id="ArrayList底层结构和源码分析"><a href="#ArrayList底层结构和源码分析" class="headerlink" title="ArrayList底层结构和源码分析"></a>ArrayList底层结构和源码分析</h5><ul>
<li>ArrayList中维护了一个Object类型的数组elementData</li>
<li>当创建ArrayList对象时，如果使用的是无参构造器，则初始elememtData容量为0，第一次添加，则扩容elementData为10，如需要再次扩容，则扩容elementData为1.5倍</li>
<li>如果使用的是指定大小的构造器，则初始elementData容量为指定大小，如果需要扩容，则直接扩容elementData为1，5备</li>
</ul>
<h5 id="Vector注意事项"><a href="#Vector注意事项" class="headerlink" title="Vector注意事项"></a>Vector注意事项</h5><ul>
<li>Vector底层是一个数组</li>
<li>Vectot是线程同步的，即线程安全</li>
</ul>
<h5 id="LinkedList底层结构"><a href="#LinkedList底层结构" class="headerlink" title="LinkedList底层结构"></a>LinkedList底层结构</h5><ul>
<li>LinkedList实现了双向链表和双端队列特点</li>
<li>可以添加任意元素，包括null</li>
<li>线程不安全，没有实现同步</li>
</ul>
<h4 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h4><h5 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h5><ul>
<li>无序，没有索引</li>
<li>不允许重复元素，所有最多包含一个null</li>
</ul>
<h5 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h5><h6 id="全面说明："><a href="#全面说明：" class="headerlink" title="全面说明："></a>全面说明：</h6><ul>
<li>HashSet实现了Set接口</li>
<li>HashSet实际上是HashMap</li>
</ul>
<h6 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h6><ul>
<li>LinkedHashSet是HashSet的子类</li>
<li>LinkedHashSet底层是一个LinkedHashMap，底层维护了一个数组 + 双向链表</li>
<li>LinkedHashSet根据元素的hashCode值来决定元素的存储位置，同时使用链表维护元素的次序，这使得元素看起来是以插入顺序保存的</li>
<li>LinkedHashSet不允许添加重复元素</li>
</ul>
<h3 id="Map接口和常用方法"><a href="#Map接口和常用方法" class="headerlink" title="Map接口和常用方法"></a>Map接口和常用方法</h3><h4 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h4><ul>
<li>Map和Collection并列存在</li>
<li>Map中的key和value可以是任何引用数据类型的数据</li>
<li>Map中的key不允许重复</li>
<li>Map中的value可以重复</li>
<li>常用String类做value</li>
<li>key和value一一对应</li>
</ul>
<h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map(key,value);<span class="comment">//添加元素</span></span><br><span class="line">remove();<span class="comment">//根据键删除元素</span></span><br><span class="line">get();<span class="comment">//根据键得到元素</span></span><br><span class="line">size();<span class="comment">//获取元素个数</span></span><br><span class="line">isEmpty();<span class="comment">//判断元素是否为0</span></span><br><span class="line">containsKey();<span class="comment">//查找键是否存在</span></span><br></pre></td></tr></table></figure>

<h4 id="遍历方式"><a href="#遍历方式" class="headerlink" title="遍历方式"></a>遍历方式</h4><h5 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Set</span> <span class="variable">keyset</span> <span class="operator">=</span> map.keySet();</span><br><span class="line">        <span class="keyword">for</span> (Object o :keyset) &#123;</span><br><span class="line">            System.out.println(o+<span class="string">&quot;-&quot;</span>+map.get(o));</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h5 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Set</span> <span class="variable">keyset</span> <span class="operator">=</span> map.keySet();</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> keyset.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">next</span> <span class="operator">=</span> it.next();</span><br><span class="line">            System.out.println(next+<span class="string">&quot;-&quot;</span>+map.get(next));</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h5 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> map.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Object o :set) &#123;</span><br><span class="line">            Map.<span class="type">Entry</span> <span class="variable">m</span> <span class="operator">=</span> (Map.Entry) o;</span><br><span class="line">            System.out.println(m.getKey() + <span class="string">&quot;-&quot;</span> + m.getValue());</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h5 id="第四种"><a href="#第四种" class="headerlink" title="第四种"></a>第四种</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> map.entrySet();</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">next</span> <span class="operator">=</span> it.next();</span><br><span class="line">            Map.<span class="type">Entry</span> <span class="variable">m</span> <span class="operator">=</span> (Map.Entry) next;</span><br><span class="line">            System.out.println(m.getKey() + <span class="string">&quot;-&quot;</span> + m.getValue());</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h4 id="Map接口实现类-HashMap"><a href="#Map接口实现类-HashMap" class="headerlink" title="Map接口实现类-HashMap"></a>Map接口实现类-HashMap</h4><h5 id="底层机制和源码分析"><a href="#底层机制和源码分析" class="headerlink" title="底层机制和源码分析"></a>底层机制和源码分析</h5><ul>
<li>HashMap底层维护了Node类型的数组table,默认为null</li>
<li>当创建对象时，将加载因子(loadfactor)初始化为0.75</li>
<li>当添加key-value时，通过key的哈希值得到table的索引</li>
<li>第一次添加，则需要扩容table容量为16，临界值为12</li>
</ul>
<h4 id="Map接口实现类-Hashtable"><a href="#Map接口实现类-Hashtable" class="headerlink" title="Map接口实现类-Hashtable"></a>Map接口实现类-Hashtable</h4><h5 id="Hashtable的基本介绍"><a href="#Hashtable的基本介绍" class="headerlink" title="Hashtable的基本介绍"></a>Hashtable的基本介绍</h5><ul>
<li>存放的元素是键值对</li>
<li>Hashtable的键和值都不能为null</li>
<li>Hashtable和HashMap的使用方法基本相同</li>
<li>Hashtable是线程安全的，HashMap是线程不安全的</li>
</ul>
<h4 id="Map接口实现类-Properties"><a href="#Map接口实现类-Properties" class="headerlink" title="Map接口实现类-Properties"></a>Map接口实现类-Properties</h4><ul>
<li>Properties类继承自Hashtable类并实现了Map接口</li>
<li>使用特点与Hashtable类似</li>
<li>Properties还可以用于从 xxxx.properties文件中，加载数据到Properties类对象，并进行读取和修改</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><img src="/posts/0/5.png" class title="图片">

<h4 id="Collection工具类"><a href="#Collection工具类" class="headerlink" title="Collection工具类"></a>Collection工具类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collections.reverse(arrayList);<span class="comment">//翻转</span></span><br><span class="line">Collections.shuffle(arrayList);<span class="comment">//随机排序</span></span><br><span class="line">Collectios.sort(arrayList);<span class="comment">//自然排序</span></span><br><span class="line">Collections.swap(arrayList,<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//交换元素</span></span><br><span class="line">Collections.max(arrayList);<span class="comment">//返回zira状态下最大的元素</span></span><br><span class="line">Collections.min(arrayList);<span class="comment">//返回zira状态下最小的元素 </span></span><br><span class="line">System.out.println(Collections.frequency(arrayList,<span class="string">&quot;tom&quot;</span>));<span class="comment">//出现的频率</span></span><br><span class="line">Collections.copy(arrayList1,arrayList);<span class="comment">//复制集合</span></span><br><span class="line">Collections.replaceAll(arrayList,<span class="string">&quot;tom&quot;</span>,<span class="string">&quot;汤姆&quot;</span>);<span class="comment">//将集合中的元素替换</span></span><br></pre></td></tr></table></figure>

<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h3 id="泛型介绍"><a href="#泛型介绍" class="headerlink" title="泛型介绍"></a>泛型介绍</h3><ul>
<li>泛型又称参数化实例，是Jdk5.0出现的新特性，解决数据类型的安全性问题</li>
<li>在类声明或实例化时只要指定好需要的具体的类型即可</li>
<li>Java泛型可以保证如果程序在编译时没有发出警告，运行时就不会产生</li>
<li>泛型的作用是：可以在类声明时通过一个标识符表示类中某个属性的类型，或者是某个方法的返回值类型，或者是参数类型</li>
</ul>
<h2 id="坦克大战"><a href="#坦克大战" class="headerlink" title="坦克大战"></a>坦克大战</h2><h2 id="线程-基础"><a href="#线程-基础" class="headerlink" title="线程(基础)"></a>线程(基础)</h2><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><ul>
<li>进程是指运行中的程序</li>
<li>进程是程序的一次执行过程，或是正在运行的一个程序，是动态过程:有它自身的产生、存在和消亡的过程</li>
</ul>
<h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><ul>
<li>线程由进程创建，是进程的一个实体</li>
<li>一个进程可以拥有多个线程</li>
</ul>
<h3 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h3><p>同一时刻，只允许执行一个线程</p>
<h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>同一时刻，可以执行多个线程</p>
<h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><p>同一个时刻，多个任务交替执行，造成一种”貌似同时”的错觉，简单来说，单核cpu实现的多任务就是并发</p>
<h3 id="并行"><a href="#并行" class="headerlink" title="并行"></a>并行</h3><p>同一个时刻，多个任务同时执行。多核cpu可以实现并行</p>
<h3 id="线程常用方法"><a href="#线程常用方法" class="headerlink" title="线程常用方法"></a>线程常用方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">setName(); <span class="comment">// 设置线程名称</span></span><br><span class="line">getName(); <span class="comment">// 获取线程名称</span></span><br><span class="line">start(); <span class="comment">// 使该线程开始执行；Java虚拟机底层调用该线程的start0()方法</span></span><br><span class="line">run(); <span class="comment">// 调用相乘对象run方法</span></span><br><span class="line">setPriority(); <span class="comment">// 设置线程优先级</span></span><br><span class="line">getPriority(); <span class="comment">// 获取线程的优先级</span></span><br><span class="line">sleep(); <span class="comment">// 在指定的毫秒数内让正在执行的线程休眠</span></span><br><span class="line">interrupt(); <span class="comment">// 中断线程</span></span><br><span class="line">yield(); <span class="comment">// 线程的礼让。让出CPU，让其他线程执行。但礼让的时间不确定，所以也不一定礼让成功</span></span><br><span class="line">join(); <span class="comment">// 线程的插队</span></span><br></pre></td></tr></table></figure>

<h3 id="用户线程和守护线程"><a href="#用户线程和守护线程" class="headerlink" title="用户线程和守护线程"></a>用户线程和守护线程</h3><ul>
<li>用户线程：也叫工作线程，当线程的任务执行完或通知方式结束</li>
<li>守护线程：一般是为工作线程服务的，当所有的用户线程结束，守护线程结束,setDaemon()函数</li>
</ul>
<h3 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h3><h3 id="线程同步机制"><a href="#线程同步机制" class="headerlink" title="线程同步机制"></a>线程同步机制</h3><ul>
<li>在多线程编程，一些敏感数据不允许被多个线程同时访问，此时就使用同步访问技术，保证数据在任何时刻，最多有一个线程访问，以保证数据的完整性。</li>
</ul>
<h3 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h3><ol>
<li>Java语言中，引入了对象互斥锁的概念，来保证共享数据操作的完整性。</li>
<li>每个对象都对应与一个可称为”互斥锁”的标记，这个标记用来保证在任意时刻，只能有一个线程访问该对象。</li>
<li>关键字synchornized来与对象的互斥锁联系。当某个对象用synchornized修饰时，表明该对象任意时刻只能由一个线程访问</li>
<li>同步的局限性：导致程序的执行效率要降低</li>
<li>同步方法(非静态的)的锁可以是this，也可以是其他对象</li>
<li>同步方法(静态的)的锁为当前类本身</li>
</ol>
<h4 id="注意事项和细节"><a href="#注意事项和细节" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h4><ol>
<li>同步方法如果没有使用static修饰：默认锁对象为this</li>
<li>如果方法使用static修饰，默认锁对象为：当前类.class</li>
<li>实现的落地步骤<ul>
<li>需要先分析上锁的代码</li>
<li>选择同步代码块或同步方法</li>
<li>要求多个线程的锁对象为同一个即可</li>
</ul>
</li>
</ol>
<h4 id="线程的死锁"><a href="#线程的死锁" class="headerlink" title="线程的死锁"></a>线程的死锁</h4><h5 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h5><p>多个线程都占用了对方的锁资源，但不肯想让，导致了死锁</p>
<h4 id="释放锁"><a href="#释放锁" class="headerlink" title="释放锁"></a>释放锁</h4><ol>
<li>当前线程的同步方法、同步代码块结束</li>
<li>当前线程在同步代码块、同步方法遇到break,return</li>
<li>当前线程在同步代码块、同步方法中出现了未处理的Error或Exception，导致异常结束</li>
<li>当前线程在同步代码块、同步方法中执行了线程对象的wait()方法，当前线程暂停，并释放锁</li>
</ol>
<h4 id="不释放锁"><a href="#不释放锁" class="headerlink" title="不释放锁"></a>不释放锁</h4><ol>
<li>调用sleep、yield方法</li>
<li>线程执行同步代码块时，其他线程调用了该线程的suspend方法将该线程挂起</li>
</ol>
<h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><h4 id="文件的概念"><a href="#文件的概念" class="headerlink" title="文件的概念"></a>文件的概念</h4><p>文件是保存数据的地方</p>
<h4 id="文件流"><a href="#文件流" class="headerlink" title="文件流"></a>文件流</h4><p>文件在程序中是以流的形式来操作的</p>
<h4 id="流"><a href="#流" class="headerlink" title="流"></a>流</h4><p>数据在数据源和程序之间的路径</p>
<h4 id="输入流"><a href="#输入流" class="headerlink" title="输入流"></a>输入流</h4><p>数据从数据源到程序的路径</p>
<h4 id="输出流"><a href="#输出流" class="headerlink" title="输出流"></a>输出流</h4><p>数据从程序到数据源的路径</p>
<h4 id="常用的文件操作"><a href="#常用的文件操作" class="headerlink" title="常用的文件操作"></a>常用的文件操作</h4><h5 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">File</span>(String pathname);<span class="comment">//根据路径创建一个File对象</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">File</span>(File parent,String child);<span class="comment">//根据父目录文件+子路径构建</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">File</span>(String parent,String child);<span class="comment">//根据父目录+子路径构建</span></span><br><span class="line">createNewFile;<span class="comment">//创建新文件</span></span><br></pre></td></tr></table></figure>

<h5 id="获取文件的相关信息"><a href="#获取文件的相关信息" class="headerlink" title="获取文件的相关信息"></a>获取文件的相关信息</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\news1.txt&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;文件的信息=&quot;</span> + file.getName());</span><br><span class="line">System.out.println(<span class="string">&quot;文件的绝对路径&quot;</span> + file.getAbsolutePath());</span><br><span class="line">System.out.println(<span class="string">&quot;文件的父级目录&quot;</span> + file.getParent());</span><br><span class="line">System.out.println(<span class="string">&quot;文件的大小&quot;</span> + file.length());</span><br><span class="line">System.out.println(<span class="string">&quot;文件是否存在=&quot;</span> + file.exists());</span><br><span class="line">System.out.println(<span class="string">&quot;是不是一个文件=&quot;</span> + file.exists());</span><br><span class="line">System.out.println(<span class="string">&quot;是不是一个目录=&quot;</span> + file.isDirectory());</span><br></pre></td></tr></table></figure>

<h3 id="IO流原理及流的分类"><a href="#IO流原理及流的分类" class="headerlink" title="IO流原理及流的分类"></a>IO流原理及流的分类</h3><ol>
<li>I&#x2F;O是Input和Output的缩写，I&#x2F;O技术是非常实用的技术，用于处理数据传输。如读&#x2F;写文件，网络通讯等。</li>
<li>Java程序中，对于数据的输入&#x2F;输出操作以”流(stream)”的方式进行。</li>
<li>java.io包下提供了各种”流”类和接口，用以获取不同种类的数据，并通过方式输入或输出数据。</li>
</ol>
<h4 id="Java-IO流原理"><a href="#Java-IO流原理" class="headerlink" title="Java IO流原理"></a>Java IO流原理</h4><ol>
<li>输入input：读取外部数据(磁盘、光盘等存储设备的数据)到程序(内存)中</li>
<li>输出output：将程序(内存)数据输出到磁盘、光盘等存储设备中</li>
</ol>
<h4 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h4><ul>
<li>按操作数据单位不同分为：字节流，字符流</li>
<li>按数据流的流向不同分为：输入流，输出流</li>
<li>按流的角色的不同分为：节点流，处理流&#x2F;包装流</li>
</ul>
<h5 id="InputStream字节输入流"><a href="#InputStream字节输入流" class="headerlink" title="InputStream字节输入流"></a>InputStream字节输入流</h5><h6 id="常用的子类"><a href="#常用的子类" class="headerlink" title="常用的子类"></a>常用的子类</h6><ol>
<li>FileInputStream:文件输入流</li>
<li>BufferedInputStream:缓冲字节输入流</li>
<li>ObjectInputStream:对象字节输入流</li>
</ol>
<h4 id="节点流和处理流"><a href="#节点流和处理流" class="headerlink" title="节点流和处理流"></a>节点流和处理流</h4><h5 id="基本介绍-2"><a href="#基本介绍-2" class="headerlink" title="基本介绍"></a>基本介绍</h5><ol>
<li>节点流可以从一个特定的数据源读写数据</li>
<li>处理流(也叫包装流)是”连接”在已存在的流(节点流或处理流)之上，为程序提供更为强大的读写功能，如BufferedReader、BufferedWritter、BufferedInputStream、BufferedOutputStream</li>
</ol>
<ul>
<li>节点流和处理流的区别和联系</li>
</ul>
<ol>
<li>节点流是底层流\低级流，直接和数据源相接。</li>
<li>处理流包装节点流，既可以消除不同节点流的实现差异，也可以提供更方便的方法来完成输入输出。</li>
<li>处理流(也叫包装流)对节点流进行包装，使用了修饰器设计模式，不会直接与数据源相连</li>
</ol>
<ul>
<li>处理流的功能主要体现在一下两个方面</li>
</ul>
<ol>
<li>性能的提高：主要以增加缓冲来提高输入输出的效率。</li>
<li>操作的便捷：处理流可能提供了一系列便捷的方法来一次输入输出大批量的数据，使用更加灵活方便。</li>
</ol>
<h5 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h5><p>ObjectInputStream和ObjectOutputStream</p>
<h6 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h6><ol>
<li>序列化就是在保存数据时，保存数据的值和数据类型</li>
<li>反序列化就是在恢复数据时，恢复数据的值和数据类型</li>
<li>需要让某个对象支持序列化机制，则必须让其类是可序列化的，为了让某个类是可序列化的，该类碧玺实现如下两个接口之一：<ul>
<li>Serializable &#x2F;&#x2F; 这是一个标记接口</li>
<li>Externalizable</li>
</ul>
</li>
</ol>
<h6 id="注意事项和细节说明"><a href="#注意事项和细节说明" class="headerlink" title="注意事项和细节说明"></a>注意事项和细节说明</h6><ol>
<li>读写顺序要一致</li>
<li>要求实现序列化或反序列化对象，需要实现Serializable</li>
<li>序列化的类中建议添加SerialVersionUID，为了提高版本的兼容性</li>
<li>序列化对象时，默认将里面所有属性都进行序列化，但除了static或transient修饰的成员</li>
<li>序列化对象时，要求里面属性的类型也需要实现序列化接口</li>
<li>序列化具备可继承性，也就是如果某类已经实现了序列化，则它的所有子类也已经默认实现了序列化</li>
</ol>
<h5 id="标准输入输出流"><a href="#标准输入输出流" class="headerlink" title="标准输入输出流"></a>标准输入输出流</h5><ul>
<li>System.in 标准输入                  类型：InputStream               默认设备：键盘</li>
<li>System.out 标准输出               类型：PrintStream                默认设备：显示器</li>
</ul>
<h5 id="转换流-InputStreamReader和OutputStreamWriter"><a href="#转换流-InputStreamReader和OutputStreamWriter" class="headerlink" title="转换流-InputStreamReader和OutputStreamWriter"></a>转换流-InputStreamReader和OutputStreamWriter</h5><h6 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h6><ol>
<li>InputStreamReader是Reader的子类，可以将InputStream(字节流)包装成Reader(字符流)</li>
<li>OutputStreamWriter是Writer的子类，实现将OutputStream(字节流)包装成Writer(字符流)</li>
<li>当处理纯文本数据时，如果使用字符流效率更高，并且可以有效解决中文问题，所以建议将字节流转换成字符流</li>
<li>可以在使用时指定编码格式</li>
</ol>
<h5 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h5><p>PrintStream和PrintWriter</p>
<h4 id="Properties类"><a href="#Properties类" class="headerlink" title="Properties类"></a>Properties类</h4><h5 id="基本介绍-3"><a href="#基本介绍-3" class="headerlink" title="基本介绍"></a>基本介绍</h5><ol>
<li><p>专门用于读写配置文件的集合类</p>
<ul>
<li>配置文件的格式：</li>
<li>键&#x3D;值</li>
</ul>
</li>
<li><p>键值对之间不需要有空格，默认是String类</p>
</li>
</ol>
<h5 id="常见方法-2"><a href="#常见方法-2" class="headerlink" title="常见方法"></a>常见方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">load:加载配置文件的键值对到Properties类;</span><br><span class="line">list:将数据显示到指定设备;</span><br><span class="line">getProperty(key):根据键值对取到Properties对象;</span><br><span class="line">store:将Properties中的键值对存储到配置文件中，在idea，保存信息到配置文件，如果有中文，会存储为unicode码;    </span><br></pre></td></tr></table></figure>

<h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><h3 id="InetAddress"><a href="#InetAddress" class="headerlink" title="InetAddress"></a>InetAddress</h3><h4 id="相关方法"><a href="#相关方法" class="headerlink" title="相关方法"></a>相关方法</h4><ol>
<li>获取本机InetAddress对象getLocalHost</li>
<li>根据指定主机名&#x2F;域名获取ip地址对象getByName</li>
<li>获取InetAddress对象的主机名getHostName</li>
<li>获取InetAddress对象的地址getHostAddress</li>
</ol>
<h3 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h3><h4 id="基本介绍-4"><a href="#基本介绍-4" class="headerlink" title="基本介绍"></a>基本介绍</h4><ol>
<li>套接字(Socket)开发网络应用程序被广泛采用，以至于成为事实上的标准。</li>
<li>通信的两端都要有Socket，是两台机器间通信的端点。</li>
<li>网络通信其实就是Socket间的通信。</li>
<li>Socket允许程序把网络连接当成一个流，数据在两个Socket间通过IO传输。</li>
<li>一般主动发起通信的应用程序属客户端，等通信请求的为服务端。</li>
</ol>
<h3 id="TCP编程"><a href="#TCP编程" class="headerlink" title="TCP编程"></a>TCP编程</h3><h4 id="基本介绍-5"><a href="#基本介绍-5" class="headerlink" title="基本介绍"></a>基本介绍</h4><ol>
<li>基于客户端——服务端的网络通信</li>
<li>底层使用的是TCP&#x2F;IP协议</li>
<li>应用场景举例：客户端发送数据，服务端接收并显示控制台</li>
<li>基于Socket的TCP编程</li>
</ol>
<h4 id="netstat-指令"><a href="#netstat-指令" class="headerlink" title="netstat 指令"></a>netstat 指令</h4><ol>
<li>netstat -an 可以查看当前主机网络情况，包括端口监听情况和网络连接情况</li>
<li>netstat -an | more 可以分页显示</li>
<li>要求在dos控制台下执行</li>
</ol>
<ul>
<li>说明<ol>
<li>Listening表示某个端口正在监听</li>
<li>如果有一个外部程序(客户端)连接到该端口，就会显示一条连接信息。</li>
</ol>
</li>
</ul>
<h4 id="TCP网络通信编程"><a href="#TCP网络通信编程" class="headerlink" title="TCP网络通信编程"></a>TCP网络通信编程</h4><ol>
<li>当客户端连接到服务端后，实际上客户端也是通过一个端口和服务端进行通讯的，这个端口是TCP&#x2F;IP来分配的，是不确定的。</li>
</ol>
<h3 id="TDP编程"><a href="#TDP编程" class="headerlink" title="TDP编程"></a>TDP编程</h3><h4 id="基本介绍-6"><a href="#基本介绍-6" class="headerlink" title="基本介绍"></a>基本介绍</h4><ol>
<li>类 DatagramSocket 和 DatagramPacket 实现了 UDP 协议网络程序。</li>
<li>UDP 数据报通过数据数据报套接字 DatagramSocket 发送和接受，系统不保证UDP，数据报一定能够安全送到目的地，也不能确定什么时候可以抵达。</li>
<li>DatagramPacket 对象封装了UDP数据报，在数据报中包含了发送端的IP地址和端口号以及接收端的IP地址和端口号。</li>
<li>UDP协议中每个数据报都给出了完整的地址信息，因此无须建立发送方和接收方的连接</li>
</ol>
<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">aClass</span> <span class="operator">=</span> Class.forName(classfullpath);<span class="comment">//加载类</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> aClass.newInstance();</span><br><span class="line">System.out.println(o.getClass());</span><br><span class="line"><span class="type">Method</span> <span class="variable">method1</span> <span class="operator">=</span> aClass.getMethod(method);</span><br><span class="line">method1.invoke(o);</span><br></pre></td></tr></table></figure>

<h3 id="机制"><a href="#机制" class="headerlink" title="机制"></a>机制</h3><ol>
<li>反射机制允许程序在执行期借助于Reflection的API取得任何类的内部信息，并能操作对象的属性及方法，反射在设计模式和框架底层都会用到。</li>
<li>加载玩类之后，在堆中就产生了一个Class类型的对象(一个类只有一个Class对象)，这个对象包含类的完整信息。</li>
</ol>
<h3 id="反射相关的主要类"><a href="#反射相关的主要类" class="headerlink" title="反射相关的主要类"></a>反射相关的主要类</h3><ol>
<li>java.lang.Class:代表一个类，Class对象表示某个类加载后在堆中的对象</li>
<li>java.lang.reflect.Method:代表类的方法</li>
<li>java.lang.reflect.Field:代表类的成员变量</li>
<li>java.lang.reflect.Construct:代表类的构造方法</li>
</ol>
<h3 id="反射调用优化-关闭访问检查"><a href="#反射调用优化-关闭访问检查" class="headerlink" title="反射调用优化-关闭访问检查"></a>反射调用优化-关闭访问检查</h3><ol>
<li>Method和Field、Constructor对象都有setAccessible()方法</li>
<li>setAccessible作用是启动和禁用访问安全检查的开关</li>
<li>参数值为true表示 反射的对象在使用时取消访问检查，提高反射的效率。参数值为false则表示反射的对象执行访问检查</li>
</ol>
<h3 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h3><ol>
<li>Class也是类，因此继承Object类</li>
<li>Class类对象不是new出来的，而是系统创建的</li>
<li>对于某个类的Class类对象，在内存中只有一份，因此类只加载一次</li>
<li>每个类的实例都会记得自己是由哪个Class实例生成</li>
<li>通过Class对象可以完整地得到一个类的完整结构，通过一系列API</li>
<li>Class对象是存放在堆的</li>
<li>类的字节码二进制数据，是放在方法区的，有的地方称为类的元数据</li>
</ol>
<h4 id="Class类常用方法"><a href="#Class类常用方法" class="headerlink" title="Class类常用方法"></a>Class类常用方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.reflection.Cat&quot;</span>);<span class="comment">//获取Cat类对应的Class对象</span></span><br><span class="line">      System.out.println(cls);<span class="comment">//输出哪个类的对象</span></span><br><span class="line">      System.out.println(cls.getClass());<span class="comment">//获取cls的运行类型</span></span><br><span class="line">      System.out.println(cls.getPackage().getName());<span class="comment">//获取包的名字</span></span><br><span class="line">      System.out.println(cls.getName());<span class="comment">//获取类的名字</span></span><br><span class="line">      <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> cls.newInstance();<span class="comment">//通过cls创建对象实例</span></span><br><span class="line">      <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> (Cat) o;<span class="comment">//强制类型转换</span></span><br><span class="line">      System.out.println(cat.getClass());</span><br><span class="line">      <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> cls.getField(<span class="string">&quot;name&quot;</span>);<span class="comment">//获取属性</span></span><br><span class="line">      System.out.println(name.get(cat));</span><br><span class="line">      name.set(cat,<span class="string">&quot;喵喵&quot;</span>);</span><br><span class="line">      System.out.println(name.get(cat));</span><br><span class="line">      Field[] fields = cls.getFields();<span class="comment">//得到所有的属性</span></span><br><span class="line">getdeclearField();<span class="comment">//得到所有属性</span></span><br></pre></td></tr></table></figure>



<h3 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h3><ul>
<li><p>基本说明</p>
<ol>
<li>静态加载：编译时加载相关的类，如果没有则报错，依赖性太强</li>
<li>动态加载：运行时加载需要的类，如果运行时不用该类，则不报错，降低了依赖性</li>
</ol>
</li>
<li><p>类加载时机</p>
<ol>
<li>当创建对象时</li>
<li>当子类被加载时</li>
<li>调用类中的静态成员时</li>
<li>通过反射</li>
</ol>
</li>
</ul>
<h4 id="通过反射创建对象"><a href="#通过反射创建对象" class="headerlink" title="通过反射创建对象"></a>通过反射创建对象</h4><ol>
<li><p>方式一：调用类中的public修饰的无参构造器</p>
</li>
<li><p>方式二：调用类中的指定构造器</p>
</li>
<li><p>Class类相关方法</p>
<ul>
<li>newInstance:调用类中的无参构造器，获取对应类的对象</li>
<li>getConstructor(Class):根据参数列表，获取对应的public构造器对象</li>
<li>getDecalaredConstructor(class clazz):根据参数列表，获取对应的构造器对象</li>
</ul>
</li>
<li><p>Constructor类相关方法</p>
<ul>
<li>setAccessible:爆破</li>
<li>newInstance(Object obj):调用构造器</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;Class_.User&quot;</span>);</span><br><span class="line"><span class="comment">//1.通过public无参构造器创建实例</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> aClass.newInstance();</span><br><span class="line">System.out.println(o);</span><br><span class="line"><span class="comment">//2.通过public有参构造器创建实例</span></span><br><span class="line">Constructor&lt;?&gt; constructor = aClass.getConstructor(String.class);</span><br><span class="line"><span class="type">Object</span> <span class="variable">hsp</span> <span class="operator">=</span> constructor.newInstance(<span class="string">&quot;hsp&quot;</span>);</span><br><span class="line">System.out.println(hsp);</span><br><span class="line">Constructor&lt;?&gt; declaredConstructor = aClass.getDeclaredConstructor(<span class="type">int</span>.class,String.class);</span><br><span class="line">declaredConstructor.setAccessible(<span class="literal">true</span>);<span class="comment">//暴力破解</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">java</span> <span class="operator">=</span> declaredConstructor.newInstance(<span class="number">20</span>, <span class="string">&quot;Java&quot;</span>);</span><br><span class="line">System.out.println(java);</span><br></pre></td></tr></table></figure>

<h4 id="通过反射访问类中的成员"><a href="#通过反射访问类中的成员" class="headerlink" title="通过反射访问类中的成员"></a>通过反射访问类中的成员</h4><ol>
<li>根据属性名获取Field对象</li>
<li>爆破：f.setAccessible(true);</li>
<li>访问:f.set(o,值);syso(f.get(o));</li>
<li>如果是静态属性，则set和get的参数o，可以写成null</li>
</ol>
]]></content>
  </entry>
</search>
